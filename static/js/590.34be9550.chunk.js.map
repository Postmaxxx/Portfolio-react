{"version":3,"file":"static/js/590.34be9550.chunk.js","mappings":"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","sources":["assets/js/ImgWithPreloader.tsx","components/blocks/splide_portfolios/Splide_portfolio.tsx"],"sourcesContent":["import { useEffect, useRef, useState } from \"react\";\r\nimport Preloader from \"src/components/preloader/Preloader\";\r\n\r\nconst ImgWithPreloader = ({link, alt}) => {\r\n\r\n\tconst [loaded, setLoaded] = useState(false);\r\n\tconst img = useRef<HTMLImageElement>();\r\n\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{loaded || <Preloader />}\r\n\t\t\t<img ref={img} src={link} alt={alt} onLoad={() => setLoaded(true)} style={{display: loaded ? \"block\" : \"none\"}} />\r\n\t\t</>\r\n\t);\r\n};\r\n\r\n\r\nexport default ImgWithPreloader;","import { useRef, useEffect, useState } from \"react\";\r\nimport * as actions from \"../../../assets/redux/actions\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\n//import { Splide, SplideSlide } from \"@splidejs/react-splide\";\r\nimport Splide from \"@splidejs/splide\";\r\n//import { setImagePortfolio } from \"../../../assets/js/setImagePortfolio\";\r\nimport \"./splide_portfolio.scss\";\r\nimport store from \"../../../assets/redux/store\";\r\nimport { IMapdispatchToProps, IMapStateToProps, IPropsJSX, ISliderOptions } from \"src/models\";\r\nimport ImgWithPreloader from \"src/assets/js/ImgWithPreloader\";\r\n\r\ninterface IContainerSize {\r\n\twidth: number\r\n\theight: number\r\n}\r\n\r\nconst SplidePortfolio:IPropsJSX = (props) => {\r\n\tconst [portfolioSplideS, setPortfolioSplideS] = useState<any>();\r\n\t//let portfolioThumbsSplide;\r\n\tconst _splideMain = useRef(null);\r\n\t//const _splideThumbs = useRef(null);\r\n\tconst [containerSize, setContainerSize] = useState({} as IContainerSize);\r\n\r\n\tconst optionsMain: ISliderOptions = {\r\n\t\tlazyLoad: false,\r\n\t\tupdateOnMove: true,\r\n\t\tperPage: 1,\r\n\t\tfixedWidth: \"100%\",\r\n\t\tperMove: 1,\r\n\t\tpagination: true,\r\n\t\tarrows: true,\r\n\t\tdrag: true,\r\n\t\tspeed: 500,\r\n\t\t//snap: false,\r\n\t\twheel: true,\r\n\t\twheelSleep: 300,\r\n\t\t//wheelMinThreshold: 50,\r\n\t\t//autoplay: true,\r\n\t\tinterval: 15000,\r\n\t\tpauseOnHover: true,\r\n\t\t//rewind: true,\r\n\t\tbreakpoints: {\r\n\t\t\t768: {\r\n\t\t\t\twheel: false,\r\n\t\t\t}, \r\n\t\t},\r\n\t};\r\n\r\n    \r\n\tconst changeDescription = (selectedImage) => {\r\n\t\tconst portfolioNumber = props.store.portfolios.selected;\r\n\t\tprops.setStore.setSelectedPortfolioImage(selectedImage);\r\n\t\tprops.setStore.setModalImage(props.store.portfolios.list[portfolioNumber].images[selectedImage]?.images.slice(-1)[0].image);\r\n\t\tprops.setStore.setModalLink(props.store.portfolios.list[portfolioNumber].images[selectedImage]?.link);\r\n\t\tprops.setStore.setModalDescr(props.store.portfolios.list[portfolioNumber].images[selectedImage]?.descr);\r\n\t};\r\n\t\r\n\tconst showModal = () => {\r\n\t\tprops.setStore.setModal(true);\r\n\t};\r\n\r\n\r\n\tconst goToImage = (imageOrder) => {\r\n\t\tif (portfolioSplideS) {\r\n\t\t\tportfolioSplideS.go(imageOrder);\r\n\t\t}\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\tif (_splideMain.current) {\r\n\t\t\tsetContainerSize({\r\n\t\t\t\twidth: _splideMain.current.offsetWidth,\r\n\t\t\t\theight:  _splideMain.current.offsetHeight,\r\n\t\t\t});\r\n\t\t\tconst portfolioSplide = new Splide(_splideMain.current, optionsMain);\r\n\t\t\tportfolioSplide.mount();\t\t\r\n\t\t\tportfolioSplide.on(\"active\", () => {changeDescription(portfolioSplide.index);});\r\n\t\t\t\r\n\t\t\tconst _slides = _splideMain.current.querySelectorAll(\".splide__slide-container\");\r\n\t\t\t_slides.forEach(cont => cont.addEventListener(\"click\", showModal));\r\n\t\t\tchangeDescription(portfolioSplide.index);\r\n\r\n\t\t\tsetPortfolioSplideS(portfolioSplide);\r\n\t\t\treturn () => {\r\n\t\t\t\t_slides.forEach(cont => cont.removeEventListener(\"click\", showModal));\r\n\t\t\t\tportfolioSplide.destroy();\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t}, [props.store.portfolios.selected]);\r\n\r\n\r\n\tuseEffect(() => {\r\n\t\tgoToImage(props.store.portfolios.selectedImage);\r\n\t}, [props.store.portfolios.selectedImage]);\r\n\t\r\n\r\n\r\n\treturn (\r\n\t\t<div className=\"splide_portfolio__container\">\r\n\t\t\t<div id=\"portfolioMainSplide\" className=\"splide\" ref={_splideMain} aria-label=\"The carousel with thumbnails. Click the image to expand.\">\r\n\t\t\t\t<div className=\"splide__track\">\r\n\t\t\t\t\t<ul className=\"splide__list\">\r\n\t\t\t\t\t\t{props.store.portfolios.list[props.store.portfolios.selected].images.map((slide, index: number) => {\r\n\t\t\t\t\t\t\tlet resultImage;\r\n\t\t\t\t\t\t\tif (_splideMain.current && Object.keys(containerSize).length > 0) {\r\n\t\t\t\t\t\t\t\tresultImage = slide.images.find(image => ((image.width >= containerSize.width) || (image.height >= containerSize.height)));\r\n\t\t\t\t\t\t\t} \r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t<li className=\"splide__slide\" key={props.store.portfolios.selected * 1000 + index}>\r\n\t\t\t\t\t\t\t\t\t<div className=\"splide__slide-container\">\r\n\t\t\t\t\t\t\t\t\t\t{_splideMain.current && \r\n\t\t\t\t\t\t\t\t\t\t\tObject.keys(containerSize).length > 0 &&\r\n\t\t\t\t\t\t\t\t\t\t\t<ImgWithPreloader link={resultImage.image} alt={slide.descr}/>\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t</ul>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\n\r\nconst mapStateToProps: IMapStateToProps = (store)  => ({store: store});\r\n\r\nconst mapDispatchToProps: IMapdispatchToProps = (dispatch) => ({\r\n\tsetStore: bindActionCreators(actions, dispatch),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SplidePortfolio);\r\n\r\n\r\n/*\r\n\t\t\t<Splide \r\n\t\t\t\tref={ splidePortfolio }\r\n\t\t\t\tonMove={newModalImg}\r\n\t\t\t\tonRefresh={newModalImg }\r\n\t\t\t\toptions={ optionsMain }>\r\n\t\t\t\t{props.store.portfolios.list[props.store.portfolios.selected].images.map((slide, index: number) => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<SplideSlide key={index}>\r\n\t\t\t\t\t\t\t<div className=\"splide__slide-container\" data-slidecontainer={index}>\r\n\t\t\t\t\t\t\t\t<img alt=\"\"/>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</SplideSlide>\r\n\t\t\t\t\t);\r\n\t\t\t\t})}\r\n\t\t\t</Splide>\r\n\r\n*/\r\n\r\n/*const showModal = (selectedImage) => {\r\n\t\tconst portfolioNumber = props.store.portfolios.selected;\r\n\t\tprops.setStore.setModalImage(store.getState().portfolios.list[portfolioNumber].images[selectedImage]?.images.slice(-1)[0].image);\r\n\t\tprops.setStore.setModalLink(store.getState().portfolios.list[portfolioNumber].images[selectedImage]?.link);\r\n\t\tprops.setStore.setModalDescr(store.getState().portfolios.list[portfolioNumber].images[selectedImage]?.descr);\r\n\t\tprops.setStore.setModal(true);\r\n\t};*/\r\n\r\n/*const newModalImg: EmptyVoid = () => {\r\n\t\t/*const selected: number = store.getState().portfolios.selected;\r\n\t\tconst slideIndex:number = portfolioMainSplide?.index ?? 0;\r\n\t\tprops.setStore.setModalImage(store.getState().portfolios.list[selected].images[slideIndex]?.images.slice(-1)[0].image);\r\n\t\tprops.setStore.setModalLink(store.getState().portfolios.list[selected].images[slideIndex]?.link);\r\n\t\tprops.setStore.setModalDescr(store.getState().portfolios.list[selected].images[slideIndex]?.descr);\r\n\t};   */\r\n    \r\n\r\n/*useEffect((): void => {\r\n\t\t/*Array.from(document.querySelectorAll(\"[data-slidecontainer]\")).forEach((slide: HTMLDivElement, slideNumber: number) => {\r\n\t\t\tconst images: ProjectItemImageItem[] = store.getState().portfolios.list[store.getState().portfolios.selected].images[slideNumber].images;\r\n\t\t\tsetImagePortfolio(slide, slide.parentNode as HTMLElement, images, obj => obj.addEventListener(\"click\", ShowModal));\r\n\t\t});\r\n\t\t//newModalImg();\r\n\t},[store.getState().portfolios.selected]);*/"],"names":["link","alt","useState","loaded","setLoaded","img","useRef","ref","src","onLoad","style","display","connect","store","dispatch","setStore","bindActionCreators","actions","props","portfolioSplideS","setPortfolioSplideS","_splideMain","containerSize","setContainerSize","optionsMain","lazyLoad","updateOnMove","perPage","fixedWidth","perMove","pagination","arrows","drag","speed","wheel","wheelSleep","interval","pauseOnHover","breakpoints","changeDescription","selectedImage","portfolioNumber","portfolios","selected","setSelectedPortfolioImage","setModalImage","list","images","slice","image","setModalLink","setModalDescr","descr","showModal","setModal","useEffect","current","width","offsetWidth","height","offsetHeight","portfolioSplide","Splide","mount","on","index","_slides","querySelectorAll","forEach","cont","addEventListener","removeEventListener","destroy","imageOrder","go","className","id","map","slide","resultImage","Object","keys","length","find","ImgWithPreloader"],"sourceRoot":""}