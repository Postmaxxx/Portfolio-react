{"version":3,"file":"static/js/402.cb765894.chunk.js","mappings":"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","sources":["assets/redux/actions.ts","components/side_panel/SidePanel.tsx"],"sourcesContent":["import { Action } from 'src/models';\r\nimport { actionList } from 'src/models';\r\n\r\n\r\nexport const setTheme = <T extends string>(theme: T): Action<T> => ({\r\n    type: actionList.SET_THEME, \r\n    payload: theme,\r\n})\r\n\r\n\r\nexport const setNavOpen = <T>(): Action<T> => ({\r\n    type: actionList.SET_NAV_OPEN,\r\n})\r\n\r\nexport const setNavClose = <T>(): Action<T> => ({\r\n    type: actionList.SET_NAV_CLOSE,\r\n})\r\n\r\nexport const setContactName = <T extends string>(email: T): Action<T> => ({\r\n    type: actionList.SET_CONTACT_NAME,\r\n    payload: email\r\n})\r\n\r\n\r\nexport const setContactEmail = <T extends string>(text: T): Action<T> => ({\r\n    type: actionList.SET_CONTACT_EMAIL,\r\n    payload: text\r\n})\r\n\r\nexport const setContactSubject = <T extends string>(text: T): Action<T> => ({\r\n    type: actionList.SET_CONTACT_SUBJECT,\r\n    payload: text\r\n})\r\n\r\nexport const setContactMessage = <T extends string>(text: T): Action<T> => ({\r\n    type: actionList.SET_CONTACT_MESSAGE,\r\n    payload: text\r\n})\r\n\r\n\r\nexport const setModal = <T extends boolean>(status: T): Action<T> => ({\r\n    type: actionList.SET_MODAL,\r\n    payload: status\r\n})\r\n\r\n\r\nexport const setModalImage = <T extends string>(url: T): Action<T> => ({\r\n    type: actionList.SET_MODAL_IMAGE,\r\n    payload: url\r\n})\r\n\r\nexport const setModalDescr = <T extends string>(text: T): Action<T> => ({\r\n    type: actionList.SET_MODAL_DESCR,\r\n    payload: text\r\n})\r\n\r\nexport const setModalLink = <T extends string>(link: T): Action<T> => ({\r\n    type: actionList.SET_MODAL_LINK,\r\n    payload: link\r\n})\r\n\r\nexport const setModalMsgVisible = <T extends boolean>(visible: T): Action<T> => ({\r\n    type: actionList.SET_MODALMSG,\r\n    payload: visible\r\n})\r\n\r\nexport const setModalMsgHeader = <T extends string>(text: T): Action<T> => ({\r\n    type: actionList.SET_MODALMSG_HEADER,\r\n    payload: text\r\n})\r\n\r\nexport const setModalMsgText = <T extends string>(text: T): Action<T> => ({\r\n    type: actionList.SET_MODALMSG_TEXT,\r\n    payload: text\r\n})\r\n\r\nexport const setModalMsgBtnText = <T extends string>(text: T): Action<T> => ({\r\n    type: actionList.SET_MODALMSG_BTNTEXT,\r\n    payload: text\r\n})\r\n\r\nexport const setSelectedPortfolio = <T extends number>(number: T): Action<T> => ({\r\n    type: actionList.SET_SELECTED_PORTFOLIO,\r\n    payload: number\r\n})\r\n\r\n\r\nexport const setImgLoaded = <T extends boolean>(isLoaded: T): Action<T> => ({\r\n    type: actionList.SET_IMG_LOADED,\r\n    payload: isLoaded\r\n})\r\n\r\n/*\r\nexport const setTest = () => ({\r\n    type: actionList.SET_IMG_LOADED,\r\n    payload: 'hgf'\r\n})*/","import { useEffect } from 'react';\r\nimport './sidePanel.scss';\r\nimport { Link, NavLink } from \"react-router-dom\";\r\nimport * as actions from '../../assets/redux/actions'\r\nimport { bindActionCreators } from 'redux';\r\nimport { connect } from 'react-redux'\r\nimport { IDispatch, IProps, ISetStore, IState, EmptyVoid, PageItem, IMapStateToProps, IMapdispatchToProps } from 'src/models';\r\n\r\n\r\nconst SidePanel: React.FC = (props: IProps): JSX.Element => {\r\n\r\n    const changeNav: EmptyVoid = (): void => {\r\n        props.store.nav_ham === '' ? props.setStore.setNavOpen() : props.setStore.setNavClose()\r\n    }\r\n\r\n    const clicked: EventListener = (e: MouseEvent): void => {\r\n        if (props.store.nav_ham === 'nav_opened' && (e.clientX > 250)) {\r\n            props.setStore.setNavClose();\r\n        }\r\n    }\r\n \r\n\r\n    useEffect(() => { //after dom rendered\r\n        document.addEventListener('click', clicked)\r\n        return () => document.removeEventListener('click', clicked)\r\n    } )\r\n\r\n\r\n    \r\n    useEffect((): void => { //update\r\n        let _container: HTMLDivElement = document.querySelector('.page-container');\r\n        let _sidePanel: HTMLDivElement = document.querySelector('.side-panel');\r\n        let _hamburgerIcon: HTMLDivElement = document.querySelector('.hamburger');\r\n        if (props.store.nav_ham === 'nav_opened') {\r\n            _container?.classList?.add('nav_opened');\r\n            _sidePanel.classList.add('nav_opened');\r\n            _hamburgerIcon.classList.add('nav_opened');\r\n        } else {\r\n            _container?.classList?.remove('nav_opened');\r\n            _sidePanel.classList.remove('nav_opened');\r\n            _hamburgerIcon.classList.remove('nav_opened');\r\n        }\r\n    }, [props.store.nav_ham])\r\n\r\n\r\n    return (\r\n        <div className=\"side-panel\">\r\n            <figure>\r\n                <Link to=\"/home\"> \r\n                    <img src={props.store.imagesMe.side} alt=\"It's me\" />\r\n                </Link>\r\n            </figure>\r\n            <nav>\r\n                <ul className=\"site-navigation\">\r\n                    {props.store.pages.map((page: PageItem, index: number) => {\r\n                        return(\r\n                            <li key={index}>\r\n                                <NavLink \r\n                                    className={ ({ isActive }) => {\r\n                                        return isActive ? 'selected' : ''\r\n                                    }}\r\n                                    onClick={props.setStore.setNavClose}\r\n                                    to={page.link}>\r\n                                    {page.text}\r\n                                </NavLink>\r\n                            </li>\r\n                        )\r\n                    })}\r\n                </ul>\r\n            </nav>\r\n            <div className=\"hamburger\" onClick={(): void => changeNav()}>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nconst mapStateToProps: IMapStateToProps = (store)  => ({store: store})\r\n\r\nconst mapDispatchToProps: IMapdispatchToProps = (dispatch) => ({\r\n    setStore: bindActionCreators(actions, dispatch),\r\n})\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SidePanel);"],"names":["setTheme","theme","type","actionList","payload","setNavOpen","setNavClose","setContactName","email","setContactEmail","text","setContactSubject","setContactMessage","setModal","status","setModalImage","url","setModalDescr","setModalLink","link","setModalMsgVisible","visible","setModalMsgHeader","setModalMsgText","setModalMsgBtnText","setSelectedPortfolio","number","setImgLoaded","isLoaded","connect","store","dispatch","setStore","bindActionCreators","actions","props","clicked","e","nav_ham","clientX","useEffect","document","addEventListener","removeEventListener","_container","querySelector","_sidePanel","_hamburgerIcon","classList","add","remove","className","to","src","imagesMe","side","alt","pages","map","page","index","isActive","onClick"],"sourceRoot":""}