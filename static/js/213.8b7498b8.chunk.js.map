{"version":3,"file":"static/js/213.8b7498b8.chunk.js","mappings":"qPA8FA,GAAeA,EAAAA,EAAAA,KAN2B,SAACC,GAAK,MAAO,CAACA,MAAOA,EAAM,IAErB,SAACC,GAAQ,MAAM,CAC9DC,UAAUC,EAAAA,EAAAA,IAAmBC,EAASH,GACtC,GAED,EApFkC,SAACI,GAClC,IAAMC,GAAkBC,EAAAA,EAAAA,QAAO,MA2BzBC,EAAuB,WAC5BH,EAAMH,SAASO,UAAS,EACzB,EAEMC,EAAyB,WAAO,IAAD,MAC9BC,EAAmBX,EAAAA,EAAAA,WAAiBY,WAAWD,SAC/CE,EAAqBP,EAAgBQ,QAAQC,OAAOC,MAAQhB,EAAAA,EAAAA,WAAiBY,WAAWK,KAAKN,GAAUO,OAAOC,OAASnB,EAAAA,EAAAA,WAAiBY,WAAWK,KAAKN,GAAUO,OAAOC,OAAS,EAAIb,EAAgBQ,QAAQC,OAAOC,MAC3NX,EAAMH,SAASkB,cAA2E,QAA9D,EAACpB,EAAAA,EAAAA,WAAiBY,WAAWK,KAAKN,GAAUO,OAAOL,UAAW,aAA7D,EAA+DK,OAAOG,OAAO,GAAG,GAAGC,OAChHjB,EAAMH,SAASqB,aAA0E,QAA9D,EAACvB,EAAAA,EAAAA,WAAiBY,WAAWK,KAAKN,GAAUO,OAAOL,UAAW,aAA7D,EAA+DW,MAC3FnB,EAAMH,SAASuB,cAA2E,QAA9D,EAACzB,EAAAA,EAAAA,WAAiBY,WAAWK,KAAKN,GAAUO,OAAOL,UAAW,aAA7D,EAA+Da,MAC7F,EAYA,OATAC,EAAAA,EAAAA,YAAU,WACTC,MAAMC,KAAKC,SAASC,iBAAiB,0BAA0BC,SAAQ,SAACC,EAAuBC,GAC9F,IAAMhB,EAAiClB,EAAAA,EAAAA,WAAiBY,WAAWK,KAAKjB,EAAAA,EAAAA,WAAiBY,WAAWD,UAAUO,OAAOgB,GAAahB,QClDpG,SAACiB,EAAsBC,GAA+G,IAAD,EAApFlB,EAA8B,uDAAG,GAAImB,EAAoC,uCACpJC,EAA2BR,SAASS,cAAc,OACxDJ,EAAQK,WAAYC,EAAAA,EAAAA,KAEpBH,EAAOI,OAAS,WACR,OAAPP,QAAO,IAAPA,GAAAA,EAASQ,gBAAgBL,GACzBD,EAAgB,OAAPF,QAAO,IAAPA,OAAO,EAAPA,EAASS,cAAc,OAEjC,EAEAN,EAAOO,IAEL,QAFQ,EAAG3B,EAAO4B,MAAK,SAACxB,GACzB,OAASA,EAAMyB,QAAoB,OAAXX,QAAW,IAAXA,OAAW,EAAXA,EAAaY,cAAiB1B,EAAM2B,SAAqB,OAAXb,QAAW,IAAXA,OAAW,EAAXA,EAAac,aACpF,WAAE,aAFW,EAET5B,KACL,CDsCG6B,CAAkBlB,EAAOA,EAAMmB,WAA2BlC,GAAQ,SAAAmC,GAAG,OAAIA,EAAIC,iBAAiB,QAAS9C,EAAU,GAClH,IACAE,GACD,GAAE,CAACV,EAAAA,EAAAA,WAAiBY,WAAWD,YAI9B,gBAAK4C,UAAU,8BAA6B,UAC3C,SAAC,KAAM,CACNC,IAAMlD,EACNmD,OAAQ/C,EACRgD,UAAWhD,EACXiD,QArD6B,CAC/BC,UAAU,EACVC,cAAc,EACdC,QAAS,EACTC,WAAY,OACZC,QAAS,EACTC,YAAY,EACZC,QAAQ,EACRC,MAAM,EACNC,MAAO,IAEPC,OAAO,EACPC,WAAY,IAGZC,SAAU,KACVC,cAAc,EAEdC,YAAa,CACZ,IAAK,CACJJ,OAAO,KAiCY,SAClBhE,EAAML,MAAMY,WAAWK,KAAKZ,EAAML,MAAMY,WAAWD,UAAUO,OAAOwD,KAAI,SAACzC,EAAOjB,GAChF,OACC,SAAC,KAAW,WACX,gBAAKuC,UAAU,0BAA0B,sBAAqBvC,EAAM,UACnE,gBAAK2D,IAAI,QAFO3D,EAMpB,OAIJ,G","sources":["components/blocks/splide_portfolios/Splide_portfolio.tsx","assets/js/setImagePortfolio.ts"],"sourcesContent":["import { useRef, useEffect } from \"react\";\r\nimport * as actions from \"../../../assets/redux/actions\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { Splide, SplideSlide } from \"@splidejs/react-splide\";\r\nimport { setImagePortfolio } from \"../../../assets/js/setImagePortfolio\";\r\nimport \"./splide_portfolio.scss\";\r\nimport store from \"../../../assets/redux/store\";\r\nimport { EmptyVoid, IMapdispatchToProps, IMapStateToProps, IPropsJSX, ISliderOptions, ProjectItemImageItem } from \"src/models\";\r\n\r\nconst SplidePortfolio:IPropsJSX = (props) => {\r\n\tconst splidePortfolio = useRef(null);\r\n\r\n\tconst options: ISliderOptions = {\r\n\t\tlazyLoad: false,\r\n\t\tupdateOnMove: true,\r\n\t\tperPage: 1,\r\n\t\tfixedWidth: \"100%\",\r\n\t\tperMove: 1,\r\n\t\tpagination: true,\r\n\t\tarrows: true,\r\n\t\tdrag: true,\r\n\t\tspeed: 500,\r\n\t\t//snap: false,\r\n\t\twheel: true,\r\n\t\twheelSleep: 300,\r\n\t\t//wheelMinThreshold: 50,\r\n\t\t//autoplay: true,\r\n\t\tinterval: 15000,\r\n\t\tpauseOnHover: true,\r\n\t\t//rewind: true,\r\n\t\tbreakpoints: {\r\n\t\t\t768: {\r\n\t\t\t\twheel: false,\r\n\t\t\t}, \r\n\t\t},\r\n\t};\r\n    \r\n\tconst ShowModal: EmptyVoid = () => {\r\n\t\tprops.setStore.setModal(true);\r\n\t};\r\n\r\n\tconst newModalImg: EmptyVoid = () => {\r\n\t\tconst selected: number = store.getState().portfolios.selected;\r\n\t\tconst slideIndex: number = splidePortfolio.current.splide.index > store.getState().portfolios.list[selected].images.length ? store.getState().portfolios.list[selected].images.length - 1 : splidePortfolio.current.splide.index;\r\n\t\tprops.setStore.setModalImage(store.getState().portfolios.list[selected].images[slideIndex]?.images.slice(-1)[0].image);\r\n\t\tprops.setStore.setModalLink(store.getState().portfolios.list[selected].images[slideIndex]?.link);\r\n\t\tprops.setStore.setModalDescr(store.getState().portfolios.list[selected].images[slideIndex]?.descr);\r\n\t};   \r\n    \r\n\r\n\tuseEffect((): void => {\r\n\t\tArray.from(document.querySelectorAll(\"[data-slidecontainer]\")).forEach((slide: HTMLDivElement, slideNumber: number) => {\r\n\t\t\tconst images: ProjectItemImageItem[] = store.getState().portfolios.list[store.getState().portfolios.selected].images[slideNumber].images;\r\n\t\t\tsetImagePortfolio(slide, slide.parentNode as HTMLElement, images, obj => obj.addEventListener(\"click\", ShowModal));\r\n\t\t});\r\n\t\tnewModalImg();\r\n\t},[store.getState().portfolios.selected]);\r\n    \r\n\r\n\treturn (\r\n\t\t<div className=\"splide_portfolio__container\">\r\n\t\t\t<Splide \r\n\t\t\t\tref={ splidePortfolio }\r\n\t\t\t\tonMove={newModalImg}\r\n\t\t\t\tonRefresh={newModalImg }\r\n\t\t\t\toptions={ options }>\r\n\t\t\t\t{props.store.portfolios.list[props.store.portfolios.selected].images.map((slide, index: number) => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<SplideSlide key={index}>\r\n\t\t\t\t\t\t\t<div className=\"splide__slide-container\" data-slidecontainer={index}>\r\n\t\t\t\t\t\t\t\t<img alt=\"\"/>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</SplideSlide>\r\n\t\t\t\t\t);\r\n\t\t\t\t})}\r\n\t\t\t</Splide>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst mapStateToProps: IMapStateToProps = (store)  => ({store: store});\r\n\r\nconst mapDispatchToProps: IMapdispatchToProps = (dispatch) => ({\r\n\tsetStore: bindActionCreators(actions, dispatch),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SplidePortfolio);","import { ProjectItemImageItem } from \"src/models\";\r\nimport preloader from \"../../components/preloader/preloader_template\";\r\n\r\nexport const setImagePortfolio = (_target: HTMLElement, _widthBlock: HTMLElement, images: ProjectItemImageItem[] = [], callback: (obj: HTMLElement) => void): void => {\r\n\tconst _image: HTMLImageElement = document.createElement(\"img\"); //create new <img>\r\n\t_target.innerHTML = preloader();\r\n\r\n\t_image.onload = (): void => { //add only this image to container\r\n\t\t_target?.replaceChildren(_image);\r\n\t\tcallback(_target?.querySelector(\"img\")); //return <img> after completely loaded. For preloader\r\n\t\t//return _target?.querySelector('img')\r\n\t};\r\n   \r\n\t_image.src = images.find((image: ProjectItemImageItem) => {\r\n\t\treturn ((image.width >= _widthBlock?.offsetWidth) || (image.height >= _widthBlock?.offsetHeight));//find first image with 'width' more than 'container width'\r\n\t})?.image; //set this image as src for created <img>\r\n};\r\n"],"names":["connect","store","dispatch","setStore","bindActionCreators","actions","props","splidePortfolio","useRef","ShowModal","setModal","newModalImg","selected","portfolios","slideIndex","current","splide","index","list","images","length","setModalImage","slice","image","setModalLink","link","setModalDescr","descr","useEffect","Array","from","document","querySelectorAll","forEach","slide","slideNumber","_target","_widthBlock","callback","_image","createElement","innerHTML","preloader","onload","replaceChildren","querySelector","src","find","width","offsetWidth","height","offsetHeight","setImagePortfolio","parentNode","obj","addEventListener","className","ref","onMove","onRefresh","options","lazyLoad","updateOnMove","perPage","fixedWidth","perMove","pagination","arrows","drag","speed","wheel","wheelSleep","interval","pauseOnHover","breakpoints","map","alt"],"sourceRoot":""}