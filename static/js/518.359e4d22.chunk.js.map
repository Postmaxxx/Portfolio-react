{"version":3,"file":"static/js/518.359e4d22.chunk.js","mappings":"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","sources":["components/blocks/splide_portfolios/Splide_portfolio.jsx","assets/js/setImagePortfolio.js"],"sourcesContent":["import React, { useRef, useEffect} from \"react\";\r\nimport * as actions from '../../../assets/redux/actions'\r\nimport { bindActionCreators } from 'redux';\r\nimport { connect } from 'react-redux'\r\nimport { Splide, SplideSlide } from '@splidejs/react-splide';\r\nimport { setImagePortfolio } from '../../../assets/js/setImagePortfolio'\r\nimport './splide_portfolio.scss'\r\n\r\nlet selected = 0;\r\n\r\nconst SplidePortfolio = (props) => {\r\n\r\n    const splidePortfolio = useRef()\r\n\r\n    selected = props.store.portfolios.selected;\r\n\r\n    const ShowModal = () => {\r\n        props.setStore.setModal(true);\r\n    }\r\n\r\n    const newModalImg = () => {\r\n        let slideIndex = splidePortfolio.current.splide.index > props.store.portfolios.list[selected].images.length ? props.store.portfolios.list[selected].images.length - 1 : splidePortfolio.current.splide.index;\r\n        props.setStore.setModalImage(props.store.portfolios.list[selected].images[slideIndex]?.images.slice(-1)[0].image)\r\n        props.setStore.setModalDescr(props.store.portfolios.list[selected].images[slideIndex]?.images.slice(-1)[0].descr)\r\n        props.setStore.setModalLink(props.store.portfolios.list[selected].images[slideIndex]?.images.slice(-1)[0].link)\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        newModalImg()\r\n    },[])\r\n\r\n\r\n    useEffect(() => {\r\n        [...document.querySelectorAll(`[data-slidecontainer]`)].map((slide, index) => {\r\n            let images = props.store.portfolios.list[props.store.portfolios.selected].images[index].images;\r\n            console.log('', props.store.portfolios.selected);\r\n            setImagePortfolio(slide, slide.parentNode, images, (obj => obj.addEventListener('click',ShowModal) ))\r\n        })\r\n        newModalImg()\r\n    },[props.store.portfolios.selected])\r\n    \r\n\r\n    return (\r\n        <div className=\"splide_portfolio__container\">\r\n            <Splide \r\n                ref={ splidePortfolio }\r\n                onMove={ () => newModalImg() }\r\n                onRefresh={ () => newModalImg() }\r\n                options={ {\r\n                    lazyLoad: false,\r\n                    updateOnMove: true,\r\n                    perPage: 1,\r\n                    fixedWidth: '100%',\r\n                    perMove: 1,\r\n                    pagination: true,\r\n                    arrows: true,\r\n                    drag: true,\r\n                    speed: 500,\r\n                    //snap: false,\r\n                    wheel: true,\r\n                    wheelSleep: 300,\r\n                    //wheelMinThreshold: 50,\r\n                    autoplay: false,\r\n                    interval: 5000,\r\n                    pauseOnHover: true,\r\n                    //rewind: false,\r\n                    breakpoints: {\r\n                        768: {\r\n                            wheel: false,\r\n                        }, \r\n                    },\r\n                } }>\r\n                    {props.store.portfolios.list[props.store.portfolios.selected].images.map((slide, index) => {\r\n                        return (\r\n                            <SplideSlide key={index}>\r\n                                <div className=\"splide__slide-container\" data-slidecontainer={index}>\r\n                                    <img \r\n                                        //src={image.image} \r\n                                        //alt={image.descr} \r\n                                        onClick={() => ShowModal()}\r\n                                        />\r\n                                </div>\r\n                            </SplideSlide>\r\n                        )\r\n                    })}\r\n            </Splide>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst mapStateToProps = (store) => ({store: store})\r\n\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    setStore: bindActionCreators(actions, dispatch),\r\n})\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SplidePortfolio);","import preloader from '../../components/preloader/preloader.js'\r\n\r\nexport const setImagePortfolio = (_target, _widthBlock, images = [], callback) => {\r\n    let _image = document.createElement(\"img\"); //create new <img>\r\n    _target.innerHTML = preloader();\r\n\r\n    _image.onload = () => { //add only this image to container\r\n        _target?.replaceChildren(_image);\r\n        callback(_target?.querySelector('img')) //return <img> after completely loaded. For preloader\r\n        //return _target?.querySelector('img')\r\n    }\r\n   \r\n    _image.src = images.find((image) => {\r\n        return ((image.width >= _widthBlock?.offsetWidth) || (image.height >= _widthBlock?.offsetHeight))//find first image with 'width' more than 'container width'\r\n    })?.image; //return this image as src for created <img>\r\n}\r\n"],"names":["selected","connect","store","dispatch","setStore","bindActionCreators","actions","props","splidePortfolio","useRef","portfolios","ShowModal","setModal","newModalImg","slideIndex","current","splide","index","list","images","length","setModalImage","slice","image","setModalDescr","descr","setModalLink","link","useEffect","document","querySelectorAll","map","slide","console","log","_target","_widthBlock","callback","_image","createElement","innerHTML","preloader","onload","replaceChildren","querySelector","src","find","width","offsetWidth","height","offsetHeight","setImagePortfolio","parentNode","obj","addEventListener","className","ref","onMove","onRefresh","options","lazyLoad","updateOnMove","perPage","fixedWidth","perMove","pagination","arrows","drag","speed","wheel","wheelSleep","autoplay","interval","pauseOnHover","breakpoints","onClick"],"sourceRoot":""}