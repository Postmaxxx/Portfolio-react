{"version":3,"file":"static/js/10.b5a092f8.chunk.js","mappings":"4PAoJA,GAAeA,EAAAA,EAAAA,KARS,SAACC,GAAK,MAAM,CAACA,MAAOA,EAAM,IAGvB,SAACC,GAAQ,MAAM,CACtCC,UAAUC,EAAAA,EAAAA,IAAmBC,EAASH,GACzC,GAGD,EArIoB,SAACI,GAEjB,IAAMC,EAAa,SAACC,GAChBF,EAAMH,SAASM,UAAS,EAC5B,EAEMC,EAAa,SAACF,GACS,QAArBA,EAAEG,OAAOC,SACTL,GAER,EAEMM,EAAUC,SAASC,cAAc,sBAoBvC,OAnBIF,IACAZ,EAAAA,EAAAA,WAAiBe,MAAQH,EAAOI,UAAUC,IAAI,QAAUL,EAAOI,UAAUE,OAAO,UAIpFC,EAAAA,EAAAA,YAAU,WACNN,SAASC,cAAc,sBAAsBM,iBAAiB,SAAS,SAACb,GAAC,OAAKA,EAAEG,SAAWH,EAAEc,eAAiBf,GAAa,IAC7GO,SAASO,iBAAiB,WAAW,SAACb,GAAC,MAAe,WAAVA,EAAEe,KAAoBhB,GAAa,IAE7F,IAAIiB,EAAUV,SAASC,cAAc,UAAUU,WAAW,GAAGA,WAAW,GACpEC,EAASZ,SAASa,cAAc,OACpCH,EAAQI,WAAYC,EAAAA,EAAAA,KACpBH,EAAOI,OAAS,WACL,OAAPN,QAAO,IAAPA,GAAAA,EAASO,gBAAgBL,EAC7B,EACAA,EAAOM,IAAM/B,EAAAA,EAAAA,WAAiBgC,WAC9BP,EAAOQ,IAAMjC,EAAAA,EAAAA,WAAiBkC,UAClC,GAAE,CAAClC,EAAAA,EAAAA,WAAiBgC,cAGhB,iBAAKG,UAAU,oBAAqBC,QAAS,SAAC7B,GAAC,OAAKE,EAAWF,EAAE,EAAC,WAC9D,gBAAK4B,UAAU,QAAO,UAClB,gBAAKC,QAAS,SAAC7B,GAAC,OAAKE,EAAWF,EAAE,EAAC,UAC/B,gBAAK6B,QAAS,SAAC7B,GAAC,OAAKE,EAAWF,EAAE,EAAC,UAC/B,gBAAKwB,IAAI,GAAGE,IAAI,YAI5B,gBAAKE,UAAU,eAAc,UACzB,gBAAKE,QAAQ,cAAcC,MAAM,6BAA6BF,QAAS9B,EAAW,UAC9E,iBAAO8B,QAAS9B,EAAYiC,EAAE,weASlD,G","sources":["components/modal_splide/ModalSplide.jsx"],"sourcesContent":["import React from \"react\";\r\nimport './modalSplide.scss'\r\nimport * as actions from '../../assets/redux/actions'\r\nimport { bindActionCreators } from 'redux';\r\nimport { connect } from 'react-redux'\r\nimport { useEffect } from \"react\";\r\nimport { Splide, SplideSlide } from '@splidejs/react-splide';\r\nimport '@splidejs/react-splide/css';\r\nimport preloader from '../preloader/preloader.js'\r\nimport { useState } from \"react\";\r\nimport store from '../../assets/redux/store'\r\n\r\n\r\nlet escListener = undefined;\r\n\r\nconst ModalSplide = (props) => {\r\n\r\n    const closeModal = (e) => {\r\n        props.setStore.setModal(false);\r\n    }\r\n\r\n    const checkClose = (e) => {\r\n        if (e.target.tagName !== 'IMG') {\r\n            closeModal(e)\r\n        }\r\n    }\r\n    \r\n    const _modal =  document.querySelector(\".modal__background\");\r\n    if (_modal) {\r\n        store.getState().modal ? _modal.classList.add('show') : _modal.classList.remove('show')\r\n    }\r\n     \r\n\r\n    useEffect(() => {\r\n        document.querySelector(\".modal__background\").addEventListener('click', (e) => e.target === e.currentTarget && closeModal(e));\r\n        escListener = document.addEventListener('keydown', (e) => e.key === 'Escape' && closeModal(e));\r\n        \r\n        let _target = document.querySelector('.modal').childNodes[0].childNodes[0];\r\n        let _image = document.createElement(\"img\");\r\n        _target.innerHTML = preloader();\r\n        _image.onload = () => { \r\n            _target?.replaceChildren(_image);\r\n        }\r\n        _image.src = store.getState().modalImage;\r\n        _image.alt = store.getState().modalDescr;\r\n    },[store.getState().modalImage])\r\n    \r\n    return (\r\n        <div className=\"modal__background\"  onClick={(e) => checkClose(e)}>\r\n            <div className=\"modal\">\r\n                <div onClick={(e) => checkClose(e)}>\r\n                    <div onClick={(e) => checkClose(e)}>\r\n                        <img src=\"\" alt=\"\" />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"modal__close\">\r\n                <svg viewBox=\"0 0 512 512\" xmlns=\"http://www.w3.org/2000/svg\" onClick={closeModal}>\r\n                    <path  onClick={closeModal} d=\"M443.6,387.1L312.4,255.4l131.5-130c5.4-5.4,5.4-14.2,0-19.6l-37.4-37.6c-2.6-2.6-6.1-4-9.8-4c-3.7,0-7.2,1.5-9.8,4  L256,197.8L124.9,68.3c-2.6-2.6-6.1-4-9.8-4c-3.7,0-7.2,1.5-9.8,4L68,105.9c-5.4,5.4-5.4,14.2,0,19.6l131.5,130L68.4,387.1  c-2.6,2.6-4.1,6.1-4.1,9.8c0,3.7,1.4,7.2,4.1,9.8l37.4,37.6c2.7,2.7,6.2,4.1,9.8,4.1c3.5,0,7.1-1.3,9.8-4.1L256,313.1l130.7,131.1  c2.7,2.7,6.2,4.1,9.8,4.1c3.5,0,7.1-1.3,9.8-4.1l37.4-37.6c2.6-2.6,4.1-6.1,4.1-9.8C447.7,393.2,446.2,389.7,443.6,387.1z\"/>\r\n                </svg>\r\n            </div>\r\n        </div>\r\n\r\n\r\n \r\n        ) \r\n\r\n}\r\n\r\n//<img onLoad={() => console.log('888', )} src={props.store.modalImage} alt={props.store.modalDescr} />\r\n/*\r\n\r\n    let _target = document.querySelector(id); //container for image\r\n    let _image = document.createElement(\"img\"); //create new <img>\r\n    _target.innerHTML = preloader();\r\n\r\n    _image.onload = () => { //add only this image to container\r\n        _target?.replaceChildren(_image);\r\n        callback(_target?.querySelector('img')) //return <img> after completely loaded. For preloader\r\n        return\r\n    }\r\n   \r\n    _image.src = images.find((image) => {\r\n        return image.width >= _target?.offsetWidth //find first image with 'width' more than 'container width'\r\n    })?.image;\r\n\r\n\r\n*/\r\n/*\r\n                <Splide options={ {\r\n                    lazyLoad: true,\r\n                    updateOnMove: true,\r\n                    type : 'loop',\r\n                    perPage: 1,\r\n                    //gap   : '2rem',\r\n                    breakpoints: {\r\n                        768: {\r\n                            gap   : '2rem',\r\n                        }, \r\n                    },\r\n                    perMove: 1,\r\n                    pagination: true,\r\n                    arrows: true,\r\n                    drag: true,\r\n                    speed: 500,\r\n                    //snap: false,\r\n                    wheel: true,\r\n                    wheelSleep: 500,\r\n                    //wheelMinThreshold: 50,\r\n                    autoplay: false,\r\n                    //interval: 5000,\r\n                    //pauseOnHover: true,\r\n                    //rewind: false,\r\n                    } }>\r\n                        {props.store.currentGallery.images.map((image, index) => {\r\n                            console.log('img', );\r\n                            return (\r\n                                <SplideSlide key={index}>\r\n                                    <div className=\"splide__slide-container\">\r\n                                        <img src={image.url} alt={image.name} />\r\n                                    </div>\r\n                                </SplideSlide>\r\n                            )\r\n                        })}\r\n                </Splide>\r\n\r\n*/                \r\n/*\r\n\r\n{props.store.currentGallery.images.map((image, index) => {\r\n                            return (\r\n                                <SplideSlide key={index}>\r\n                                    <div className=\"splide__slide-container\">\r\n                                        <img src=\"\" alt={image.name} />\r\n                                    </div>\r\n                            </SplideSlide>\r\n                            )\r\n                        })}\r\n\r\n*/\r\nconst mapStateToProps = (store) => ({store: store})\r\n\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    setStore: bindActionCreators(actions, dispatch),\r\n})\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ModalSplide);"],"names":["connect","store","dispatch","setStore","bindActionCreators","actions","props","closeModal","e","setModal","checkClose","target","tagName","_modal","document","querySelector","modal","classList","add","remove","useEffect","addEventListener","currentTarget","key","_target","childNodes","_image","createElement","innerHTML","preloader","onload","replaceChildren","src","modalImage","alt","modalDescr","className","onClick","viewBox","xmlns","d"],"sourceRoot":""}