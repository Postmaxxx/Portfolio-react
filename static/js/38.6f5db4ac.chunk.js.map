{"version":3,"file":"static/js/38.6f5db4ac.chunk.js","mappings":"8PA6FA,GAAeA,EAAAA,EAAAA,KARS,SAACC,GAAK,MAAM,CAACA,MAAOA,EAAM,IAGvB,SAACC,GAAQ,MAAM,CACtCC,UAAUC,EAAAA,EAAAA,IAAmBC,EAASH,GACzC,GAGD,EApFwB,SAACI,GAErB,IAAMC,GAAkBC,EAAAA,EAAAA,UAElBC,EAAY,WACdH,EAAMH,SAASO,UAAS,EAC5B,EAEMC,EAAc,WAAO,IAAD,MAClBC,EAAWX,EAAAA,EAAAA,WAAiBY,WAAWD,SACvCE,EAAaP,EAAgBQ,QAAQC,OAAOC,MAAQhB,EAAAA,EAAAA,WAAiBY,WAAWK,KAAKN,GAAUO,OAAOC,OAASnB,EAAAA,EAAAA,WAAiBY,WAAWK,KAAKN,GAAUO,OAAOC,OAAS,EAAIb,EAAgBQ,QAAQC,OAAOC,MACjNX,EAAMH,SAASkB,cAA2E,QAA9D,EAACpB,EAAAA,EAAAA,WAAiBY,WAAWK,KAAKN,GAAUO,OAAOL,UAAW,aAA7D,EAA+DK,OAAOG,OAAO,GAAG,GAAGC,OAChHjB,EAAMH,SAASqB,aAA0E,QAA9D,EAACvB,EAAAA,EAAAA,WAAiBY,WAAWK,KAAKN,GAAUO,OAAOL,UAAW,aAA7D,EAA+DW,MAC3FnB,EAAMH,SAASuB,cAA2E,QAA9D,EAACzB,EAAAA,EAAAA,WAAiBY,WAAWK,KAAKN,GAAUO,OAAOL,UAAW,aAA7D,EAA+Da,MAChG,EAYA,OATAC,EAAAA,EAAAA,YAAU,YACN,OAAIC,SAASC,iBAAiB,0BAA0BC,KAAI,SAACC,EAAOC,GAChE,IAAId,EAASlB,EAAAA,EAAAA,WAAiBY,WAAWK,KAAKjB,EAAAA,EAAAA,WAAiBY,WAAWD,UAAUO,OAAOc,GAAad,QCzBnF,SAACe,EAAsBC,GAA+G,IAAD,EAApFhB,EAA8B,uDAAG,GAAIiB,EAAoC,uCACnJC,EAA2BR,SAASS,cAAc,OACtDJ,EAAQK,WAAYC,EAAAA,EAAAA,KAEpBH,EAAOI,OAAS,WACL,OAAPP,QAAO,IAAPA,GAAAA,EAASQ,gBAAgBL,GACzBD,EAAgB,OAAPF,QAAO,IAAPA,OAAO,EAAPA,EAASS,cAAc,OAEpC,EAEAN,EAAOO,IAEL,QAFQ,EAAGzB,EAAO0B,MAAK,SAACtB,GACtB,OAASA,EAAMuB,QAAoB,OAAXX,QAAW,IAAXA,OAAW,EAAXA,EAAaY,cAAiBxB,EAAMyB,SAAqB,OAAXb,QAAW,IAAXA,OAAW,EAAXA,EAAac,aACvF,WAAE,aAFW,EAET1B,KACR,CDaY2B,CAAkBlB,EAAOA,EAAMmB,WAAYhC,GAAQ,SAAAiC,GAAG,OAAIA,EAAIC,iBAAiB,QAAQ5C,EAAU,GACrG,IACAE,GACJ,GAAE,CAACV,EAAAA,EAAAA,WAAiBY,WAAWD,YAI3B,gBAAK0C,UAAU,8BAA6B,UACxC,SAAC,KAAM,CACHC,IAAMhD,EACNiD,OAAQ7C,EACR8C,UAAW9C,EACX+C,QAAU,CACNC,UAAU,EACVC,cAAc,EACdC,QAAS,EACTC,WAAY,OACZC,QAAS,EACTC,YAAY,EACZC,QAAQ,EACRC,MAAM,EACNC,MAAO,IAEPC,OAAO,EACPC,WAAY,IAEZC,UAAU,EACVC,SAAU,IACVC,cAAc,EAEdC,YAAa,CACT,IAAK,CACDL,OAAO,KAGhB,SACE9D,EAAML,MAAMY,WAAWK,KAAKZ,EAAML,MAAMY,WAAWD,UAAUO,OAAOY,KAAI,SAACC,EAAOf,GAC7E,OACI,SAAC,KAAW,WACR,gBAAKqC,UAAU,0BAA0B,sBAAqBrC,EAAM,UAChE,gBAAKyD,QAASjE,OAFJQ,EAM1B,OAIpB,G","sources":["components/blocks/splide_portfolios/Splide_portfolio.jsx","assets/js/setImagePortfolio.ts"],"sourcesContent":["import { useRef, useEffect} from \"react\";\r\nimport * as actions from '../../../assets/redux/actions'\r\nimport { bindActionCreators } from 'redux';\r\nimport { connect } from 'react-redux'\r\nimport { Splide, SplideSlide } from '@splidejs/react-splide';\r\nimport { setImagePortfolio } from '../../../assets/js/setImagePortfolio'\r\nimport './splide_portfolio.scss'\r\nimport store from '../../../assets/redux/store'\r\n\r\nconst SplidePortfolio = (props) => {\r\n\r\n    const splidePortfolio = useRef()\r\n    \r\n    const ShowModal = () => {\r\n        props.setStore.setModal(true);\r\n    }\r\n\r\n    const newModalImg = () => {\r\n        let selected = store.getState().portfolios.selected\r\n        let slideIndex = splidePortfolio.current.splide.index > store.getState().portfolios.list[selected].images.length ? store.getState().portfolios.list[selected].images.length - 1 : splidePortfolio.current.splide.index;\r\n        props.setStore.setModalImage(store.getState().portfolios.list[selected].images[slideIndex]?.images.slice(-1)[0].image)\r\n        props.setStore.setModalLink(store.getState().portfolios.list[selected].images[slideIndex]?.link)\r\n        props.setStore.setModalDescr(store.getState().portfolios.list[selected].images[slideIndex]?.descr)\r\n    }   \r\n    \r\n\r\n    useEffect(() => {\r\n        [...document.querySelectorAll(`[data-slidecontainer]`)].map((slide, slideNumber) => {\r\n            let images = store.getState().portfolios.list[store.getState().portfolios.selected].images[slideNumber].images;\r\n            setImagePortfolio(slide, slide.parentNode, images, obj => obj.addEventListener('click',ShowModal))\r\n        })\r\n        newModalImg()\r\n    },[store.getState().portfolios.selected])\r\n    \r\n\r\n    return (\r\n        <div className=\"splide_portfolio__container\">\r\n            <Splide \r\n                ref={ splidePortfolio }\r\n                onMove={newModalImg}\r\n                onRefresh={newModalImg }\r\n                options={ {\r\n                    lazyLoad: false,\r\n                    updateOnMove: true,\r\n                    perPage: 1,\r\n                    fixedWidth: '100%',\r\n                    perMove: 1,\r\n                    pagination: true,\r\n                    arrows: true,\r\n                    drag: true,\r\n                    speed: 500,\r\n                    //snap: false,\r\n                    wheel: true,\r\n                    wheelSleep: 300,\r\n                    //wheelMinThreshold: 50,\r\n                    autoplay: false,\r\n                    interval: 5000,\r\n                    pauseOnHover: true,\r\n                    //rewind: false,\r\n                    breakpoints: {\r\n                        768: {\r\n                            wheel: false,\r\n                        }, \r\n                    },\r\n                } }>\r\n                    {props.store.portfolios.list[props.store.portfolios.selected].images.map((slide, index) => {\r\n                        return (\r\n                            <SplideSlide key={index}>\r\n                                <div className=\"splide__slide-container\" data-slidecontainer={index}>\r\n                                    <img onClick={ShowModal} />\r\n                                </div>\r\n                            </SplideSlide>\r\n                        )\r\n                    })}\r\n            </Splide>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst mapStateToProps = (store) => ({store: store})\r\n\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    setStore: bindActionCreators(actions, dispatch),\r\n})\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SplidePortfolio);","import { ProjectItemImageItem } from 'src/models';\r\nimport preloader from '../../components/preloader/preloader_template'\r\n\r\nexport const setImagePortfolio = (_target: HTMLElement, _widthBlock: HTMLElement, images: ProjectItemImageItem[] = [], callback: (obj: HTMLElement) => void): void => {\r\n    let _image: HTMLImageElement = document.createElement(\"img\"); //create new <img>\r\n    _target.innerHTML = preloader();\r\n\r\n    _image.onload = (): void => { //add only this image to container\r\n        _target?.replaceChildren(_image);\r\n        callback(_target?.querySelector('img')) //return <img> after completely loaded. For preloader\r\n        //return _target?.querySelector('img')\r\n    }\r\n   \r\n    _image.src = images.find((image: ProjectItemImageItem) => {\r\n        return ((image.width >= _widthBlock?.offsetWidth) || (image.height >= _widthBlock?.offsetHeight))//find first image with 'width' more than 'container width'\r\n    })?.image; //set this image as src for created <img>\r\n}\r\n"],"names":["connect","store","dispatch","setStore","bindActionCreators","actions","props","splidePortfolio","useRef","ShowModal","setModal","newModalImg","selected","portfolios","slideIndex","current","splide","index","list","images","length","setModalImage","slice","image","setModalLink","link","setModalDescr","descr","useEffect","document","querySelectorAll","map","slide","slideNumber","_target","_widthBlock","callback","_image","createElement","innerHTML","preloader","onload","replaceChildren","querySelector","src","find","width","offsetWidth","height","offsetHeight","setImagePortfolio","parentNode","obj","addEventListener","className","ref","onMove","onRefresh","options","lazyLoad","updateOnMove","perPage","fixedWidth","perMove","pagination","arrows","drag","speed","wheel","wheelSleep","autoplay","interval","pauseOnHover","breakpoints","onClick"],"sourceRoot":""}