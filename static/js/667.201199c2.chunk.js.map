{"version":3,"file":"static/js/667.201199c2.chunk.js","mappings":"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","sources":["assets/redux/actions.ts","components/blocks/input/Input.tsx","components/blocks/textarea/Textarea.tsx","components/blocks/contact/Contact_block.tsx","components/modals/Modal.jsx","components/message/Message.jsx","pages/contact/Contact.tsx","assets/js/inputChecker.ts"],"sourcesContent":["import { Action } from 'src/models';\r\nimport { actionList } from 'src/models';\r\n\r\n\r\nexport const setTheme = <T extends string>(theme: T): Action<T> => ({\r\n    type: actionList.SET_THEME, \r\n    payload: theme,\r\n})\r\n\r\n\r\nexport const setNavOpen = <T>(): Action<T> => ({\r\n    type: actionList.SET_NAV_OPEN,\r\n})\r\n\r\nexport const setNavClose = <T>(): Action<T> => ({\r\n    type: actionList.SET_NAV_CLOSE,\r\n})\r\n\r\nexport const setContactName = <T extends string>(email: T): Action<T> => ({\r\n    type: actionList.SET_CONTACT_NAME,\r\n    payload: email\r\n})\r\n\r\n\r\nexport const setContactEmail = <T extends string>(text: T): Action<T> => ({\r\n    type: actionList.SET_CONTACT_EMAIL,\r\n    payload: text\r\n})\r\n\r\nexport const setContactSubject = <T extends string>(text: T): Action<T> => ({\r\n    type: actionList.SET_CONTACT_SUBJECT,\r\n    payload: text\r\n})\r\n\r\nexport const setContactMessage = <T extends string>(text: T): Action<T> => ({\r\n    type: actionList.SET_CONTACT_MESSAGE,\r\n    payload: text\r\n})\r\n\r\n\r\nexport const setModal = <T extends boolean>(status: T): Action<T> => ({\r\n    type: actionList.SET_MODAL,\r\n    payload: status\r\n})\r\n\r\n\r\nexport const setModalImage = <T extends string>(url: T): Action<T> => ({\r\n    type: actionList.SET_MODAL_IMAGE,\r\n    payload: url\r\n})\r\n\r\nexport const setModalDescr = <T extends string>(text: T): Action<T> => ({\r\n    type: actionList.SET_MODAL_DESCR,\r\n    payload: text\r\n})\r\n\r\nexport const setModalLink = <T extends string>(link: T): Action<T> => ({\r\n    type: actionList.SET_MODAL_LINK,\r\n    payload: link\r\n})\r\n\r\nexport const setModalMsgVisible = <T extends boolean>(visible: T): Action<T> => ({\r\n    type: actionList.SET_MODALMSG,\r\n    payload: visible\r\n})\r\n\r\nexport const setModalMsgHeader = <T extends string>(text: T): Action<T> => ({\r\n    type: actionList.SET_MODALMSG_HEADER,\r\n    payload: text\r\n})\r\n\r\nexport const setModalMsgText = <T extends string>(text: T): Action<T> => ({\r\n    type: actionList.SET_MODALMSG_TEXT,\r\n    payload: text\r\n})\r\n\r\nexport const setModalMsgBtnText = <T extends string>(text: T): Action<T> => ({\r\n    type: actionList.SET_MODALMSG_BTNTEXT,\r\n    payload: text\r\n})\r\n\r\nexport const setSelectedPortfolio = <T extends number>(number: T): Action<T> => ({\r\n    type: actionList.SET_SELECTED_PORTFOLIO,\r\n    payload: number\r\n})\r\n\r\n\r\nexport const setImgLoaded = <T extends boolean>(isLoaded: T): Action<T> => ({\r\n    type: actionList.SET_IMG_LOADED,\r\n    payload: isLoaded\r\n})\r\n\r\n/*\r\nexport const setTest = () => ({\r\n    type: actionList.SET_IMG_LOADED,\r\n    payload: 'hgf'\r\n})*/","import './input.scss'\r\n\r\n\r\ninterface IInputProps {\r\n    type: string\r\n    id: string\r\n    text: string\r\n    value: string\r\n    required: boolean\r\n    checkType: string\r\n    name: string\r\n    data: string\r\n    minLength: number\r\n    maxLength: number\r\n    changeValue(e: React.ChangeEvent<HTMLInputElement>);\r\n    onKeyUp?: any\r\n    refLink?: any\r\n}\r\n\r\n\r\n\r\nconst Input: React.FC<IInputProps> = (props: IInputProps): JSX.Element => {\r\n    return (\r\n        <div className=\"input__container\">\r\n            <label htmlFor={props.id}>{props.text}</label>\r\n            <input \r\n                type={props.type} \r\n                id={props.id}\r\n                value={props.value}\r\n                onChange={props.changeValue}\r\n                required={props.required}\r\n                name={props.name}\r\n                data-input={props.data}\r\n                data-min_length={props.minLength}\r\n                data-max_length={props.maxLength}\r\n                data-type={props.checkType}\r\n                onKeyUp={props.onKeyUp}\r\n                ref={props.refLink}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Input;","import './textarea.scss'\r\n\r\n\r\ninterface ITextareaProps {\r\n    type?: string\r\n    id: string\r\n    text: string\r\n    value: string\r\n    required: boolean\r\n    checkType: string\r\n    name: string\r\n    data: string\r\n    minLength: number\r\n    maxLength: number\r\n    changeValue(e: React.ChangeEvent<HTMLTextAreaElement>);\r\n    onKeyUp?: any\r\n    refLink?: any\r\n}\r\n\r\n\r\n\r\nconst Textarea: React.FC<ITextareaProps> = (props: ITextareaProps): JSX.Element => {\r\n    return (\r\n        <div className=\"textarea__container\">\r\n            <label htmlFor={props.id}>{props.text}</label>\r\n            <textarea \r\n                id={props.id}\r\n                value={props.value}\r\n                onChange={props.changeValue}\r\n                required={props.required}\r\n                name={props.name}\r\n                data-input={props.data}\r\n                data-min_length={props.minLength}\r\n                data-max_length={props.maxLength}\r\n                data-type={props.checkType}\r\n                ref={props.refLink}\r\n                onKeyUp={props.onKeyUp}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Textarea;","import { ContactItem, IProps } from 'src/models';\r\nimport './contact_block.scss'\r\n\r\ninterface IContactBlock {\r\n    image: JSX.Element\r\n    header: string\r\n    links: ContactItem[]\r\n}\r\n\r\nconst ContactBlock: React.FC<IContactBlock> = (props: IContactBlock): JSX.Element => {\r\n    return (\r\n        <div className=\"contact-block\">\r\n            <div className=\"img-container\">\r\n                {props.image}\r\n            </div>\r\n            <div className=\"contact-info\">\r\n                <span>{props.header}</span>\r\n                {props.links?.map((link: ContactItem, index: number) => <a href={link.link} key={index} target={link.newWindow ? \"_blank\" : null}>{link.text}</a>)}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ContactBlock;\r\n","import * as actions from '../../assets/redux/actions'\r\nimport { bindActionCreators } from 'redux';\r\nimport { connect } from 'react-redux'\r\nimport './modal.scss'\r\n\r\n\r\n\r\nexport function Modal(props) {\r\n    return (\r\n        <>\r\n            <div \r\n            className={`modal_common ${props.store.modalMsg.active ? 'active' : ''}`}\r\n            onClick={() => props.setStore.setModalMsgVisible(false)}\r\n            >\r\n                {props.children}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\nconst mapStateToProps = (store) => ({store: store})\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    setStore: bindActionCreators(actions, dispatch),\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Modal);\r\n\r\n\r\n\r\n","import './message.scss'\r\n\r\nfunction Message({header, text, buttonText, buttonClickAction}) {\r\n    return (\r\n        <div className='message__container' onClick={e => e.stopPropagation()}>\r\n            <h1 >{header}</h1>\r\n            <p>{text}</p>\r\n            <button className='link_button' onClick={buttonClickAction}>{buttonText}</button>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Message","//import { HTMLInputTypeAttribute } from 'react';\r\nimport * as actions from '../../assets/redux/actions'\r\nimport { bindActionCreators } from 'redux';\r\nimport { connect } from 'react-redux'\r\nimport { checkInput } from '../../assets/js/inputChecker';\r\nimport axios, { AxiosError, AxiosResponse } from \"axios\";\r\nimport Input from '../../components/blocks/input/Input';\r\nimport Textarea from '../../components/blocks/textarea/Textarea';\r\nimport ContactBlock from \"../../components/blocks/contact/Contact_block\";\r\nimport Modal from '../../components/modals/Modal'\r\nimport Message from '../../components/message/Message'\r\nimport './contact.scss';\r\nimport { IMapdispatchToProps, IMapStateToProps, IProps } from 'src/models';\r\nimport { useRef } from 'react'\r\n\r\nconst Contact: React.FC  = (props: IProps): JSX.Element => {\r\n\r\n    const checkInputs = (inputs: NodeListOf<HTMLInputElement>): boolean => {\r\n        let errorMessage: Array<string>= [];\r\n        Array.from(inputs).forEach((input: HTMLInputElement) => {\r\n            let error: string | boolean = checkInput(input.value.trim(), input.dataset.type, input.dataset.min_length,input.dataset.max_length); \r\n            if (error && input.required) {\r\n                let inputParent:HTMLElement = input.parentNode as HTMLElement;\r\n                inputParent.classList.add('incorrect')\r\n                errorMessage.push(`${input.name.charAt(0).toUpperCase() + input.name.slice(1)} ${error}`)\r\n            }\r\n        })\r\n        if (errorMessage.length > 0) {\r\n            props.setStore.setModalMsgHeader('Incorrect data');\r\n            props.setStore.setModalMsgText(`Some errors were found: \\n` + errorMessage.join(',\\n'));\r\n            props.setStore.setModalMsgBtnText('Close');\r\n            props.setStore.setModalMsgVisible(true);\r\n            return false\r\n        } else {\r\n            return true;   \r\n        } \r\n    }\r\n\r\n\r\n    const sendMessage = (e: React.FormEvent<HTMLButtonElement>): void => {\r\n        e.preventDefault();\r\n        if (checkInputs(document.querySelectorAll('[data-input=\"contact\"]'))) {\r\n            let currentDate: Date = new Date();\r\n            let apiToken: string = process.env.REACT_APP_TG_TOK;\r\n            let chatId: string = process.env.REACT_APP_CHT_ID;\r\n            let text: string = `Date: ${currentDate.getDate() + '.' + (currentDate.getMonth()+1) + '.' + currentDate.getFullYear()}%0ATime: ${currentDate.getHours() + '.' + currentDate.getMinutes() + '.' + currentDate.getSeconds()}%0AName: ${props.store.contact.name}%0AEmail: ${props.store.contact.email}%0ATopic: ${props.store.contact.subject}%0A%0AMessage: ${props.store.contact.message}` ;\r\n            let urlString: string = `https://api.telegram.org/bot${apiToken}/sendMessage?chat_id=${chatId}&text=${text}`;\r\n    \r\n            axios.get(urlString)\r\n                .then(function(response: AxiosResponse): void {\r\n                    props.setStore.setContactSubject('');\r\n                    props.setStore.setContactMessage('');\r\n                    //alert('Your message has been sent.');\r\n                    props.setStore.setModalMsgHeader('');\r\n                    props.setStore.setModalMsgText('Your message has been sent.');\r\n                    props.setStore.setModalMsgBtnText('Close');\r\n                    props.setStore.setModalMsgVisible(true)\r\n                })\r\n                .catch(function(error: AxiosError): void {\r\n                    props.setStore.setModalMsgHeader('Error');\r\n                    props.setStore.setModalMsgText('Service unavailable. Please, try again later. \\nError: '+ error.message);\r\n                    props.setStore.setModalMsgBtnText('Close');\r\n                    props.setStore.setModalMsgVisible(true)\r\n                    //alert('Service unavailable. Please, try again later. Error: ' + error);\r\n                })\r\n        }\r\n    }\r\n\r\n    const changeValue = (e: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\r\n        if (e.currentTarget.id === 'contact_name') {props.setStore.setContactName(e.currentTarget.value)}\r\n        if (e.currentTarget.id === 'contact_email') {props.setStore.setContactEmail(e.currentTarget.value)}\r\n        if (e.currentTarget.id === 'contact_subject') {props.setStore.setContactSubject(e.currentTarget.value)}\r\n        if (e.currentTarget.id === 'contact_message') {props.setStore.setContactMessage(e.currentTarget.value)}\r\n        let parent:HTMLElement =  e.currentTarget.parentNode as HTMLElement;\r\n        parent.classList.remove('incorrect')\r\n    }\r\n\r\n\r\n    const inputEmail = useRef<HTMLInputElement>();\r\n    const inputSubject = useRef<HTMLTextAreaElement>()\r\n    const inputMessage = useRef<HTMLInputElement>()\r\n\r\n    const changeFocus = (e: React.KeyboardEvent): void => {\r\n        if (e.key === \"Enter\") {\r\n            if (e.currentTarget.id === 'contact_name') {inputEmail.current.focus()}\r\n            if (e.currentTarget.id === 'contact_email') {inputSubject.current.focus()}\r\n            if (e.currentTarget.id === 'contact_subject') {inputMessage.current.focus()}\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <Modal>\r\n                <Message \r\n                    header={props.store.modalMsg.header}\r\n                    text={props.store.modalMsg.text}\r\n                    buttonText={props.store.modalMsg.btnText}\r\n                    buttonClickAction={() => props.setStore.setModalMsgVisible(false)}\r\n                />\r\n            </Modal>\r\n            <div className=\"page-container\">\r\n                <div className=\"page_contact\">\r\n                    <section className='contact-me'> \r\n                        <h2>Contact me<em>Contact me</em></h2>\r\n                        <h4>Get In Touch</h4>\r\n                        <div className=\"contact__container\">\r\n                            <div className=\"mail-me\">\r\n                                <Input \r\n                                    id= 'contact_name'\r\n                                    text=  'Your name *'\r\n                                    changeValue={changeValue}\r\n                                    value={props.store.contact.name}\r\n                                    required={true}\r\n                                    type= 'text'\r\n                                    checkType= 'all'\r\n                                    name= 'name'\r\n                                    data= 'contact'\r\n                                    minLength={2}\r\n                                    maxLength={15}\r\n                                    onKeyUp={changeFocus}\r\n                                    />\r\n                                <Input \r\n                                    id='contact_email'\r\n                                    text='Your email *'\r\n                                    changeValue={changeValue}\r\n                                    value={props.store.contact.email}\r\n                                    required={true}\r\n                                    type='email'\r\n                                    checkType='email'\r\n                                    name='email'\r\n                                    data='contact'\r\n                                    minLength={6}\r\n                                    maxLength={50}\r\n                                    refLink={inputEmail}\r\n                                    onKeyUp={changeFocus}\r\n                                    />\r\n                                <Input \r\n                                    id='contact_subject'\r\n                                    text='Your subject'\r\n                                    changeValue={changeValue}\r\n                                    value={props.store.contact.subject}\r\n                                    required={false}\r\n                                    type='text'\r\n                                    checkType='all'\r\n                                    name='subject'\r\n                                    data='contact'\r\n                                    minLength={6}\r\n                                    maxLength={50}\r\n                                    refLink={inputSubject}\r\n                                    onKeyUp={changeFocus}\r\n                                    />\r\n                                <Textarea\r\n                                    id='contact_message'\r\n                                    text='Your message *'\r\n                                    changeValue={changeValue}\r\n                                    value={props.store.contact.message}\r\n                                    required={true}\r\n                                    checkType='all'\r\n                                    name='message'\r\n                                    data='contact'\r\n                                    minLength={10}\r\n                                    maxLength={500}\r\n                                    refLink={inputMessage}\r\n                                    />\r\n                                <button type=\"submit\" className=\"link_button\" onClick={(e: React.FormEvent<HTMLButtonElement>) => sendMessage(e)}>Send message</button>      \r\n                            </div>\r\n                            <div className=\"my-info\">\r\n                                <ContactBlock \r\n                                    image={\r\n                                        <svg className=\"img-phone\" xmlns=\"http://www.w3.org/2000/svg\" clipRule=\"evenodd\" viewBox=\"0 0 508 512.06\"><title>Phone</title>\r\n                                            <path d=\"M123.43 249.39c15.07,27.16 32.42,53.26 54.98,77.05 22.61,23.95 50.71,45.72 87.14,64.3 2.7,1.32 5.27,1.32 7.55,0.42 3.46,-1.33 6.99,-4.18 10.47,-7.67 2.7,-2.69 6.04,-6.99 9.56,-11.7 13.99,-18.44 31.34,-41.29 55.81,-29.86 0.54,0.25 0.95,0.53 1.49,0.78l81.66 46.96c0.22,0.12 0.53,0.42 0.77,0.53 10.78,7.41 15.2,18.84 15.32,31.76 0,13.18 -4.85,27.98 -11.96,40.5 -9.4,16.5 -23.27,27.43 -39.25,34.69 -15.2,7 -32.13,10.75 -48.4,13.15 -25.55,3.77 -49.47,1.37 -73.94,-6.16 -23.94,-7.42 -48.03,-19.63 -74.37,-35.89l-1.95 -1.25c-12.07,-7.52 -25.12,-15.61 -37.91,-25.13 -46.91,-35.4 -94.65,-86.48 -125.74,-142.71 -26.08,-47.2 -40.32,-98.15 -32.53,-146.73 4.3,-26.63 15.72,-50.84 35.63,-66.82 17.35,-13.98 40.74,-21.64 71.01,-18.96 3.48,0.23 6.58,2.27 8.19,5.24l52.33 88.5c7.67,9.93 8.61,19.75 4.44,29.58 -3.49,8.09 -10.47,15.5 -20.04,22.46 -2.82,2.4 -6.18,4.84 -9.69,7.4 -11.71,8.5 -25,18.3 -20.45,29.85l-0.12 -0.29zm97.51 -42.25c-8.08,-2.08 -12.94,-10.35 -10.85,-18.43 2.09,-8.08 10.35,-12.94 18.43,-10.85 24.51,6.39 47.56,19.66 66.21,37.07 18.76,17.52 33.31,39.41 40.66,62.88 2.48,7.99 -1.98,16.49 -9.96,18.97 -7.98,2.49 -16.49,-1.97 -18.97,-9.95 -5.75,-18.37 -17.33,-35.69 -32.36,-49.73 -15.15,-14.15 -33.68,-24.88 -53.16,-29.96zm2.01 -92.74c-8.25,-1.4 -13.79,-9.24 -12.39,-17.49 1.39,-8.24 9.24,-13.79 17.48,-12.39 46.21,8 90.08,31.46 125.25,64.38 35.19,32.92 61.82,75.41 73.53,121.46 2.06,8.12 -2.85,16.38 -10.97,18.44 -8.12,2.06 -16.38,-2.85 -18.44,-10.97 -10.3,-40.48 -33.75,-77.89 -64.75,-106.89 -30.93,-28.95 -69.38,-49.55 -109.71,-56.54zm9.74 -84.19c-8.31,-0.95 -14.28,-8.47 -13.33,-16.78 0.95,-8.31 8.46,-14.29 16.77,-13.34 64.65,7.57 125.4,37.22 173.49,80.81 48.21,43.69 83.83,101.51 98.02,165.22 1.8,8.14 -3.35,16.22 -11.5,18.02 -8.14,1.8 -16.22,-3.35 -18.02,-11.5 -12.8,-57.45 -45.05,-109.73 -88.77,-149.34 -43.53,-39.45 -98.4,-66.28 -156.66,-73.09z\"/>\r\n                                        </svg>\r\n                                    }\r\n                                    header='Phone'\r\n                                    links={props.store.contacts.phone}\r\n                                />\r\n                                <ContactBlock \r\n                                    image={\r\n                                        <svg className=\"img-email\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 122.88 88.86\"><title>Email</title>\r\n                                            <path d=\"M7.05,0H115.83a7.07,7.07,0,0,1,7,7.05V81.81a7,7,0,0,1-1.22,4,2.78,2.78,0,0,1-.66,1,2.62,2.62,0,0,1-.66.46,7,7,0,0,1-4.51,1.65H7.05a7.07,7.07,0,0,1-7-7V7.05A7.07,7.07,0,0,1,7.05,0Zm-.3,78.84L43.53,40.62,6.75,9.54v69.3ZM49.07,45.39,9.77,83.45h103L75.22,45.39l-11,9.21h0a2.7,2.7,0,0,1-3.45,0L49.07,45.39Zm31.6-4.84,35.46,38.6V9.2L80.67,40.55ZM10.21,5.41,62.39,47.7,112.27,5.41Z\"/>\r\n                                        </svg>\r\n                                    }\r\n                                    header='Email'\r\n                                    links={props.store.contacts.email}\r\n                                />\r\n                                <ContactBlock \r\n                                    image={\r\n                                        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 92.26 122.88\"><title>Address</title>\r\n                                            <path d=\"M47.49,116.85c6.31-4.01,11.98-8.87,16.92-14.29c10.73-11.75,17.97-26.11,20.87-40.2c2.88-13.91,1.52-27.54-4.85-38.06 c-1.81-3.02-4.08-5.78-6.78-8.26c-7.74-7.05-16.6-10.41-25.52-10.5c-9.37-0.07-18.87,3.45-27.27,10.14 c-3.58,2.86-6.53,6.15-8.82,9.78c-5.9,9.28-7.69,20.8-5.74,32.85c1.97,12.23,7.78,25.02,17.04,36.61 c6.44,8.08,14.54,15.58,24.18,21.91L47.49,116.85L47.49,116.85z M46.13,21.16c7.05,0,13.45,2.86,18.06,7.49 c4.63,4.63,7.49,11,7.49,18.06c0,7.05-2.86,13.45-7.49,18.06c-4.63,4.63-11,7.49-18.06,7.49c-7.05,0-13.45-2.86-18.06-7.49 c-4.63-4.63-7.49-11-7.49-18.06c0-7.05,2.86-13.45,7.49-18.06C32.7,24.02,39.07,21.16,46.13,21.16L46.13,21.16z M60.51,32.33 c-3.67-3.67-8.78-5.97-14.38-5.97c-5.63,0-10.71,2.27-14.38,5.97c-3.67,3.67-5.97,8.78-5.97,14.38c0,5.63,2.27,10.71,5.97,14.38 c3.67,3.67,8.78,5.97,14.38,5.97c5.63,0,10.71-2.27,14.38-5.97c3.67-3.67,5.97-8.78,5.97-14.38C66.47,41.08,64.21,36,60.51,32.33 L60.51,32.33z M68.52,106.27c-5.6,6.12-12.09,11.61-19.42,16.06c-0.88,0.66-2.13,0.75-3.13,0.11 c-10.8-6.87-19.85-15.13-26.99-24.09C9.15,86.02,2.94,72.34,0.83,59.16c-2.15-13.36-0.14-26.2,6.51-36.68 c2.63-4.13,5.97-7.89,10.07-11.14C26.78,3.88,37.51-0.07,48.17,0c10.28,0.09,20.42,3.9,29.22,11.93c3.09,2.81,5.67,5.99,7.78,9.48 c7.15,11.77,8.69,26.81,5.56,42.01c-3.11,15.04-10.8,30.33-22.18,42.8L68.52,106.27L68.52,106.27z\"/>\r\n                                        </svg>\r\n                                    }\r\n                                    header='Address'\r\n                                    links={props.store.contacts.address}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </section>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nconst mapStateToProps: IMapStateToProps = (store)  => ({store: store})\r\n\r\nconst mapDispatchToProps: IMapdispatchToProps = (dispatch) => ({\r\n    setStore: bindActionCreators(actions, dispatch),\r\n})\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Contact);","export const checkInput: Function = (text: string, type: string, minLength: number, maxLength: number): boolean | string => {\r\n    const emailFormat: RegExp = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n    const textFormat: RegExp = /[a-zA-Z]$/;\r\n    const textNumbersFormat: RegExp = /[a-zA-Z0-9]$/;\r\n    const numbersFormat: RegExp = /[0-9]$/;\r\n    if (text.length < minLength) { \r\n        return `should be at least ${minLength} symbols`\r\n    }\r\n    if (text.length > maxLength) { \r\n        return `should be no more than ${maxLength} symbols`\r\n    }\r\n    if (type ==='email' && !text.match(emailFormat)) { \r\n        return 'format is incorrect'\r\n    }\r\n    if (type ==='text' && !text.match(textFormat)) { \r\n        return 'only english letters are allowed'\r\n    }\r\n    if (type ==='textNumbers' && !text.match(textNumbersFormat)) { \r\n        return 'only english letters and numbers are allowed'\r\n    }\r\n    if (type ==='numbers' && !text.match(numbersFormat)) { \r\n        return 'only numbers are allowed'\r\n    }\r\n    if (type === 'all') {\r\n        return false\r\n    }\r\n    return false\r\n}\r\n\r\n"],"names":["setTheme","theme","type","actionList","payload","setNavOpen","setNavClose","setContactName","email","setContactEmail","text","setContactSubject","setContactMessage","setModal","status","setModalImage","url","setModalDescr","setModalLink","link","setModalMsgVisible","visible","setModalMsgHeader","setModalMsgText","setModalMsgBtnText","setSelectedPortfolio","number","setImgLoaded","isLoaded","props","className","htmlFor","id","value","onChange","changeValue","required","name","data","minLength","maxLength","checkType","onKeyUp","ref","refLink","image","header","links","map","index","href","target","newWindow","connect","store","dispatch","setStore","bindActionCreators","actions","modalMsg","active","onClick","children","buttonText","buttonClickAction","e","stopPropagation","sendMessage","preventDefault","inputs","errorMessage","Array","from","forEach","input","error","trim","dataset","min_length","max_length","length","match","parentNode","classList","add","push","charAt","toUpperCase","slice","join","checkInputs","document","querySelectorAll","currentDate","Date","getDate","getMonth","getFullYear","getHours","getMinutes","getSeconds","contact","subject","message","urlString","process","axios","then","response","catch","currentTarget","remove","inputEmail","useRef","inputSubject","inputMessage","changeFocus","key","current","focus","btnText","xmlns","clipRule","viewBox","d","contacts","phone","address"],"sourceRoot":""}