{"version":3,"file":"static/js/590.ee4c00e8.chunk.js","mappings":"kKAkBA,IAfyB,SAAH,GAAqB,IAAhBA,EAAI,EAAJA,KAAMC,EAAG,EAAHA,IAEhC,GAA4BC,EAAAA,EAAAA,WAAS,GAAM,eAApCC,EAAM,KAAEC,EAAS,KAClBC,GAAMC,EAAAA,EAAAA,UAGZ,OACC,gCACEH,IAAU,SAAC,IAAS,KACrB,gBAAKI,IAAKF,EAAKG,IAAKR,EAAMC,IAAKA,EAAKQ,OAAQ,kBAAML,GAAU,EAAK,EAAEM,MAAO,CAACC,QAASR,EAAS,QAAU,YAG1G,C,uDCFA,IAAMS,EAAoB,SAAH,GAA6D,IAAxDC,EAAK,EAALA,MAAOC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAI1C,OAHAC,QAAQC,IAAIJ,EAAOC,GAECC,EAAOG,MAAK,SAAAC,GAAK,OAAMA,EAAMN,OAASA,GAAWM,EAAML,QAAUA,CAAO,KACtEC,EAAOA,EAAOK,OAAS,EAC9C,C,+JCwHA,GAAeC,EAAAA,EAAAA,KAfS,SAACC,GACxB,MAAO,CACNC,KAAMD,EAAME,WAAWD,KACvBE,SAAUH,EAAME,WAAWC,SAC3BC,cAAeJ,EAAME,WAAWE,cAElC,IAKgD,SAACC,GAAQ,MAAM,CAC9DC,UAAUC,EAAAA,EAAAA,IAAmBC,EAASH,GACtC,GAED,EA3HwB,SAACI,GACxB,IAAMC,GAAkB1B,EAAAA,EAAAA,QAAe,MACjC2B,GAAgB3B,EAAAA,EAAAA,QAAuB,MACvC4B,GAAc5B,EAAAA,EAAAA,QAAuB,MAC3C,GAAsCJ,EAAAA,EAAAA,WAAS,GAAK,eAA7CiC,EAAW,KAAEC,EAAc,KAE5BC,EAA8B,CACnCC,UAAU,EACVC,cAAc,EACdC,QAAS,EACTC,WAAY,OACZC,QAAS,EACTC,YAAY,EACZC,QAAQ,EACRC,MAAM,EACNC,MAAO,IAEPC,OAAO,EACPC,WAAY,IAGZC,SAAU,KACVC,cAAc,EAEdC,YAAa,CACZ,IAAK,CACJJ,OAAO,KAMJK,EAAoB,SAAC1B,GACFK,EAAMN,SAC9BM,EAAMH,SAASyB,0BAA0B3B,EAI1C,EAEM4B,EAAkB,WACvBvB,EAAMH,SAAS2B,gBAAe,EAC/B,EA8DA,OAnDAC,EAAAA,EAAAA,YAAU,WACTvB,EAAcwB,QAAU,CACvB5C,MAAQqB,EAAYuB,QAAQC,YAC5B5C,OAASoB,EAAYuB,QAAQE,cAE9B3B,EAAgByB,QAAU,IAAIG,EAAAA,GAAO1B,EAAYuB,QAASpB,GAC1DL,EAAgByB,QAAQI,QACxB7B,EAAgByB,QAAQK,GAAG,UAAU,WAAOV,EAAkBpB,EAAgByB,QAAQM,MAAO,IAE7F,IAAMC,EAAU9B,EAAYuB,QAAQQ,iBAAiB,4BAGrD,OAFAD,EAAQE,SAAQ,SAAAC,GAAI,OAAIA,EAAKC,iBAAiB,QAASd,EAAgB,IACvEF,EAAkBpB,EAAgByB,QAAQM,OACnC,WAENC,EAAQE,SAAQ,SAAAC,GAAI,OAAIA,EAAKE,oBAAoB,QAASf,EAAgB,IAC1EtB,EAAgByB,QAAQa,SACzB,CACD,GAAG,CAACvC,EAAMN,YAGV+B,EAAAA,EAAAA,YAAU,WA5BQ,IAACe,IA6BRxC,EAAML,cA5BhBM,EAAgByB,QAAQe,GAAGD,EA6B5B,GAAG,CAACxC,EAAML,iBAGV8B,EAAAA,EAAAA,YAAU,WA5BTpB,GAAe,EA8BhB,GAAE,KAGiBqC,EAAAA,EAAAA,UAAQ,WAC1B,OAAO,gBAAKC,UAAU,8BAA6B,UAClD,gBAAKC,GAAG,sBAAsBD,UAAU,SAASnE,IAAK2B,EAAa,aAAW,2DAA0D,UACvI,gBAAKwC,UAAU,gBAAe,UAC7B,eAAIA,UAAU,eAAc,SAC1B3C,EAAMR,KAAKQ,EAAMN,UAAUV,OAAO6D,KAAI,SAACC,EAAOd,GAC9C,OACC,eAAIW,UAAU,gBAAe,UAC5B,gBAAKA,UAAU,0BAAyB,SACtC1C,EAAgByB,UAAW,SAACqB,EAAA,EAAgB,CAAC9E,MAAMY,EAAAA,EAAAA,GAAkB,CAACG,OAAQ8D,EAAM9D,OAAQF,MAAOoB,EAAcwB,QAAQ5C,MAAOC,OAAQmB,EAAcwB,QAAQ3C,SAASK,MAAOlB,IAAK4E,EAAME,WAFxI,IAAjBhD,EAAMN,SAAkBsC,EAM7D,WAML,GAAE,CAAC5B,EAAaJ,EAAMN,UAGvB,G","sources":["assets/js/ImgWithPreloader.tsx","assets/js/findBestSuitedImg.ts","components/blocks/splide_portfolios/Splide_portfolio.tsx"],"sourcesContent":["import { useEffect, useRef, useState } from \"react\";\r\nimport Preloader from \"src/components/preloader/Preloader\";\r\n\r\nconst ImgWithPreloader = ({link, alt}) => {\r\n\r\n\tconst [loaded, setLoaded] = useState(false);\r\n\tconst img = useRef<HTMLImageElement>();\r\n\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{loaded || <Preloader />}\r\n\t\t\t<img ref={img} src={link} alt={alt} onLoad={() => setLoaded(true)} style={{display: loaded ? \"block\" : \"none\"}} />\r\n\t\t</>\r\n\t);\r\n};\r\n\r\n\r\nexport default ImgWithPreloader;","type PImage = {\r\n\t[key:string] : any\r\n\twidth: number\r\n\theight: number\r\n}\r\n\r\n\r\ntype PfindBestSuitedImg = {\r\n\twidth: number\r\n\theight: number\r\n\timages: Array<PImage>\r\n}\r\n\r\nconst findBestSuitedImg = ({width, height, images}: PfindBestSuitedImg): PImage => {\r\n\tconsole.log(width, height);\r\n\t\r\n\tconst resultImage = images.find(image => ((image.width >= width) || (image.height >= height)));\r\n\treturn resultImage || images[images.length - 1];\r\n};\r\n\r\nexport { findBestSuitedImg };","import { useRef, useEffect, useState, useMemo } from \"react\";\r\nimport * as actions from \"../../../assets/redux/actions\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport Splide from \"@splidejs/splide\";\r\nimport \"./splide_portfolio.scss\";\r\nimport { IMapdispatchToProps, IMapStateToProps, IPropsJSX, ISliderOptions } from \"src/models\";\r\nimport ImgWithPreloader from \"src/assets/js/ImgWithPreloader\";\r\nimport { findBestSuitedImg } from \"src/assets/js/findBestSuitedImg\";\r\n\r\ninterface IContainerSize {\r\n\twidth: number\r\n\theight: number\r\n}\r\n\r\nconst SplidePortfolio = (props) => {\r\n\tconst portfolioSplide = useRef<Splide>(null);\r\n\tconst containerSize = useRef<IContainerSize>(null);\r\n\tconst _splideMain = useRef<HTMLDivElement>(null);\r\n\tconst [firstRender, setFirstRender] = useState(true);\r\n\r\n\tconst optionsMain: ISliderOptions = {\r\n\t\tlazyLoad: false,\r\n\t\tupdateOnMove: true,\r\n\t\tperPage: 1,\r\n\t\tfixedWidth: \"100%\",\r\n\t\tperMove: 1,\r\n\t\tpagination: true,\r\n\t\tarrows: true,\r\n\t\tdrag: true,\r\n\t\tspeed: 500,\r\n\t\t//snap: false,\r\n\t\twheel: true,\r\n\t\twheelSleep: 300,\r\n\t\t//wheelMinThreshold: 50,\r\n\t\t//autoplay: true,\r\n\t\tinterval: 15000,\r\n\t\tpauseOnHover: true,\r\n\t\t//rewind: true,\r\n\t\tbreakpoints: {\r\n\t\t\t768: {\r\n\t\t\t\twheel: false,\r\n\t\t\t}, \r\n\t\t},\r\n\t};\r\n\r\n    \r\n\tconst changeDescription = (selectedImage) => {\r\n\t\tconst portfolioNumber = props.selected;\r\n\t\tprops.setStore.setSelectedPortfolioImage(selectedImage);\r\n\t\t/*props.setStore.setModalImage(props.list[portfolioNumber].images[selectedImage]?.images.slice(-1)[0].image);\r\n\t\tprops.setStore.setModalLink(props.list[portfolioNumber].images[selectedImage]?.link);\r\n\t\tprops.setStore.setModalDescr(props.list[portfolioNumber].images[selectedImage]?.descr);*/\r\n\t};\r\n\t\r\n\tconst showSplideModal = () => {\r\n\t\tprops.setStore.setModalSplide(true);\r\n\t};\r\n\r\n\r\n\tconst goToImage = (imageOrder) => {\r\n\t\tportfolioSplide.current.go(imageOrder);\r\n\t};\r\n\r\n\tconst additionalRender = () => {\r\n\t\tsetFirstRender(false);\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\tcontainerSize.current = {\r\n\t\t\twidth:  _splideMain.current.offsetWidth,\r\n\t\t\theight:  _splideMain.current.offsetHeight,\r\n\t\t};\r\n\t\tportfolioSplide.current = new Splide(_splideMain.current, optionsMain);\r\n\t\tportfolioSplide.current.mount();\t\t\r\n\t\tportfolioSplide.current.on(\"active\", () => {changeDescription(portfolioSplide.current.index);});\r\n\t\t\t\r\n\t\tconst _slides = _splideMain.current.querySelectorAll(\".splide__slide-container\");\r\n\t\t_slides.forEach(cont => cont.addEventListener(\"click\", showSplideModal));\r\n\t\tchangeDescription(portfolioSplide.current.index);\r\n\t\treturn () => {\r\n\t\t\t\r\n\t\t\t_slides.forEach(cont => cont.removeEventListener(\"click\", showSplideModal));\r\n\t\t\tportfolioSplide.current.destroy();\r\n\t\t};\r\n\t}, [props.selected]);\r\n\r\n\r\n\tuseEffect(() => {\r\n\t\tgoToImage(props.selectedImage);\r\n\t}, [props.selectedImage]);\r\n\t\r\n\r\n\tuseEffect(() => {\r\n\t\tadditionalRender();\r\n\t},[]);\r\n\t\r\n\r\n\tconst renderMemo = useMemo(() => {\r\n\t\treturn <div className=\"splide_portfolio__container\">\r\n\t\t\t<div id=\"portfolioMainSplide\" className=\"splide\" ref={_splideMain} aria-label=\"The carousel with thumbnails. Click the image to expand.\">\r\n\t\t\t\t<div className=\"splide__track\">\r\n\t\t\t\t\t<ul className=\"splide__list\">\r\n\t\t\t\t\t\t{props.list[props.selected].images.map((slide, index: number) => {\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t<li className=\"splide__slide\" key={props.selected * 1000 + index}>\r\n\t\t\t\t\t\t\t\t\t<div className=\"splide__slide-container\">\r\n\t\t\t\t\t\t\t\t\t\t{portfolioSplide.current && <ImgWithPreloader link={findBestSuitedImg({images: slide.images, width: containerSize.current.width, height: containerSize.current.height}).image} alt={slide.descr}/>}\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t</ul>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>;\r\n\t},[firstRender, props.selected]);\r\n\r\n\treturn renderMemo;\r\n};\r\n\r\n\r\nconst mapStateToProps = (state)  => {\r\n\treturn {\r\n\t\tlist: state.portfolios.list,\r\n\t\tselected: state.portfolios.selected,\r\n\t\tselectedImage: state.portfolios.selectedImage,\r\n\t};\r\n};\r\n\r\n\r\n\r\n\r\nconst mapDispatchToProps: IMapdispatchToProps = (dispatch) => ({\r\n\tsetStore: bindActionCreators(actions, dispatch),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SplidePortfolio);\r\n"],"names":["link","alt","useState","loaded","setLoaded","img","useRef","ref","src","onLoad","style","display","findBestSuitedImg","width","height","images","console","log","find","image","length","connect","state","list","portfolios","selected","selectedImage","dispatch","setStore","bindActionCreators","actions","props","portfolioSplide","containerSize","_splideMain","firstRender","setFirstRender","optionsMain","lazyLoad","updateOnMove","perPage","fixedWidth","perMove","pagination","arrows","drag","speed","wheel","wheelSleep","interval","pauseOnHover","breakpoints","changeDescription","setSelectedPortfolioImage","showSplideModal","setModalSplide","useEffect","current","offsetWidth","offsetHeight","Splide","mount","on","index","_slides","querySelectorAll","forEach","cont","addEventListener","removeEventListener","destroy","imageOrder","go","useMemo","className","id","map","slide","ImgWithPreloader","descr"],"sourceRoot":""}