{"version":3,"file":"static/js/213.1c44d777.chunk.js","mappings":"sPA8FA,GAAeA,EAAAA,EAAAA,KAN2B,SAACC,GAAK,MAAO,CAACA,MAAOA,EAAM,IAErB,SAACC,GAAQ,MAAM,CAC3DC,UAAUC,EAAAA,EAAAA,IAAmBC,EAASH,GACzC,GAED,EApFkC,SAACI,GAC/B,IAAMC,GAAkBC,EAAAA,EAAAA,QAAO,MA2BzBC,EAAuB,WACzBH,EAAMH,SAASO,UAAS,EAC5B,EAEMC,EAAyB,WAAO,IAAD,MAC7BC,EAAmBX,EAAAA,EAAAA,WAAiBY,WAAWD,SAC/CE,EAAqBP,EAAgBQ,QAAQC,OAAOC,MAAQhB,EAAAA,EAAAA,WAAiBY,WAAWK,KAAKN,GAAUO,OAAOC,OAASnB,EAAAA,EAAAA,WAAiBY,WAAWK,KAAKN,GAAUO,OAAOC,OAAS,EAAIb,EAAgBQ,QAAQC,OAAOC,MACzNX,EAAMH,SAASkB,cAA2E,QAA9D,EAACpB,EAAAA,EAAAA,WAAiBY,WAAWK,KAAKN,GAAUO,OAAOL,UAAW,aAA7D,EAA+DK,OAAOG,OAAO,GAAG,GAAGC,OAChHjB,EAAMH,SAASqB,aAA0E,QAA9D,EAACvB,EAAAA,EAAAA,WAAiBY,WAAWK,KAAKN,GAAUO,OAAOL,UAAW,aAA7D,EAA+DW,MAC3FnB,EAAMH,SAASuB,cAA2E,QAA9D,EAACzB,EAAAA,EAAAA,WAAiBY,WAAWK,KAAKN,GAAUO,OAAOL,UAAW,aAA7D,EAA+Da,MAChG,EAYA,OATAC,EAAAA,EAAAA,YAAU,WACNC,MAAMC,KAAKC,SAASC,iBAAiB,0BAA0BC,KAAI,SAACC,EAAuBC,GACvF,IAAIhB,EAAiClB,EAAAA,EAAAA,WAAiBY,WAAWK,KAAKjB,EAAAA,EAAAA,WAAiBY,WAAWD,UAAUO,OAAOgB,GAAahB,QClD3G,SAACiB,EAAsBC,GAA8G,IAAD,EAAnFlB,EAA8B,uDAAG,GAAImB,EAAmC,uCAClJC,EAA2BR,SAASS,cAAc,OACtDJ,EAAQK,WAAYC,EAAAA,EAAAA,KAEpBH,EAAOI,OAAS,WACL,OAAPP,QAAO,IAAPA,GAAAA,EAASQ,gBAAgBL,GACzBD,EAAgB,OAAPF,QAAO,IAAPA,OAAO,EAAPA,EAASS,cAAc,OAEpC,EAEAN,EAAOO,IAEL,QAFQ,EAAG3B,EAAO4B,MAAK,SAACxB,GACtB,OAASA,EAAMyB,QAAoB,OAAXX,QAAW,IAAXA,OAAW,EAAXA,EAAaY,cAAiB1B,EAAM2B,SAAqB,OAAXb,QAAW,IAAXA,OAAW,EAAXA,EAAac,aACvF,WAAE,aAFW,EAET5B,KACR,CDsCY6B,CAAkBlB,EAAOA,EAAMmB,WAA2BlC,GAAQ,SAAAmC,GAAG,OAAIA,EAAIC,iBAAiB,QAAS9C,EAAU,GACrH,IACAE,GACJ,GAAE,CAACV,EAAAA,EAAAA,WAAiBY,WAAWD,YAI3B,gBAAK4C,UAAU,8BAA6B,UACxC,SAAC,KAAM,CACHC,IAAMlD,EACNmD,OAAQ/C,EACRgD,UAAWhD,EACXiD,QArDoB,CAC5BC,UAAU,EACVC,cAAc,EACdC,QAAS,EACTC,WAAY,OACZC,QAAS,EACTC,YAAY,EACZC,QAAQ,EACRC,MAAM,EACNC,MAAO,IAEPC,OAAO,EACPC,WAAY,IAEZC,UAAU,EACVC,SAAU,IACVC,cAAc,EAEdC,YAAa,CACT,IAAK,CACDL,OAAO,KAiCY,SACdhE,EAAML,MAAMY,WAAWK,KAAKZ,EAAML,MAAMY,WAAWD,UAAUO,OAAOc,KAAI,SAACC,EAAOjB,GAC7E,OACI,SAAC,KAAW,WACR,gBAAKuC,UAAU,0BAA0B,sBAAqBvC,EAAM,UAChE,sBAFUA,EAM1B,OAIpB,G","sources":["components/blocks/splide_portfolios/Splide_portfolio.tsx","assets/js/setImagePortfolio.ts"],"sourcesContent":["import { useRef, useEffect, Ref} from \"react\";\r\nimport * as actions from '../../../assets/redux/actions'\r\nimport { bindActionCreators } from 'redux';\r\nimport { connect } from 'react-redux'\r\nimport { Splide, SplideSlide } from '@splidejs/react-splide';\r\nimport { setImagePortfolio } from '../../../assets/js/setImagePortfolio'\r\nimport './splide_portfolio.scss'\r\nimport store from '../../../assets/redux/store'\r\nimport { EmptyVoid, IMapdispatchToProps, IMapStateToProps, IPropsJSX, ISliderOptions, ProjectItemImageItem } from \"src/models\";\r\n\r\nconst SplidePortfolio:IPropsJSX = (props) => {\r\n    const splidePortfolio = useRef(null);\r\n\r\n    const options: ISliderOptions = {\r\n        lazyLoad: false,\r\n        updateOnMove: true,\r\n        perPage: 1,\r\n        fixedWidth: '100%',\r\n        perMove: 1,\r\n        pagination: true,\r\n        arrows: true,\r\n        drag: true,\r\n        speed: 500,\r\n        //snap: false,\r\n        wheel: true,\r\n        wheelSleep: 300,\r\n        //wheelMinThreshold: 50,\r\n        autoplay: false,\r\n        interval: 5000,\r\n        pauseOnHover: true,\r\n        //rewind: false,\r\n        breakpoints: {\r\n            768: {\r\n                wheel: false,\r\n            }, \r\n        },\r\n    }\r\n    \r\n    const ShowModal: EmptyVoid = () => {\r\n        props.setStore.setModal(true);\r\n    }\r\n\r\n    const newModalImg: EmptyVoid = () => {\r\n        let selected: number = store.getState().portfolios.selected\r\n        let slideIndex: number = splidePortfolio.current.splide.index > store.getState().portfolios.list[selected].images.length ? store.getState().portfolios.list[selected].images.length - 1 : splidePortfolio.current.splide.index;\r\n        props.setStore.setModalImage(store.getState().portfolios.list[selected].images[slideIndex]?.images.slice(-1)[0].image)\r\n        props.setStore.setModalLink(store.getState().portfolios.list[selected].images[slideIndex]?.link)\r\n        props.setStore.setModalDescr(store.getState().portfolios.list[selected].images[slideIndex]?.descr)\r\n    }   \r\n    \r\n\r\n    useEffect((): void => {\r\n        Array.from(document.querySelectorAll(`[data-slidecontainer]`)).map((slide: HTMLDivElement, slideNumber: number) => {\r\n            let images: [ProjectItemImageItem] = store.getState().portfolios.list[store.getState().portfolios.selected].images[slideNumber].images;\r\n            setImagePortfolio(slide, slide.parentNode as HTMLElement, images, obj => obj.addEventListener('click', ShowModal))\r\n        })\r\n        newModalImg()\r\n    },[store.getState().portfolios.selected])\r\n    \r\n\r\n    return (\r\n        <div className=\"splide_portfolio__container\">\r\n            <Splide \r\n                ref={ splidePortfolio }\r\n                onMove={newModalImg}\r\n                onRefresh={newModalImg }\r\n                options={ options }>\r\n                    {props.store.portfolios.list[props.store.portfolios.selected].images.map((slide, index: number) => {\r\n                        return (\r\n                            <SplideSlide key={index}>\r\n                                <div className=\"splide__slide-container\" data-slidecontainer={index}>\r\n                                    <img />\r\n                                </div>\r\n                            </SplideSlide>\r\n                        )\r\n                    })}\r\n            </Splide>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst mapStateToProps: IMapStateToProps = (store)  => ({store: store})\r\n\r\nconst mapDispatchToProps: IMapdispatchToProps = (dispatch) => ({\r\n    setStore: bindActionCreators(actions, dispatch),\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SplidePortfolio);","import { ProjectItemImageItem } from 'src/models';\r\nimport preloader from '../../components/preloader/preloader_template'\r\n\r\nexport const setImagePortfolio = (_target: HTMLElement, _widthBlock: HTMLElement, images: ProjectItemImageItem[] = [], callback: (obj: HTMLElement) => any): void => {\r\n    let _image: HTMLImageElement = document.createElement(\"img\"); //create new <img>\r\n    _target.innerHTML = preloader();\r\n\r\n    _image.onload = (): void => { //add only this image to container\r\n        _target?.replaceChildren(_image);\r\n        callback(_target?.querySelector('img')) //return <img> after completely loaded. For preloader\r\n        //return _target?.querySelector('img')\r\n    }\r\n   \r\n    _image.src = images.find((image: ProjectItemImageItem) => {\r\n        return ((image.width >= _widthBlock?.offsetWidth) || (image.height >= _widthBlock?.offsetHeight))//find first image with 'width' more than 'container width'\r\n    })?.image; //set this image as src for created <img>\r\n}\r\n"],"names":["connect","store","dispatch","setStore","bindActionCreators","actions","props","splidePortfolio","useRef","ShowModal","setModal","newModalImg","selected","portfolios","slideIndex","current","splide","index","list","images","length","setModalImage","slice","image","setModalLink","link","setModalDescr","descr","useEffect","Array","from","document","querySelectorAll","map","slide","slideNumber","_target","_widthBlock","callback","_image","createElement","innerHTML","preloader","onload","replaceChildren","querySelector","src","find","width","offsetWidth","height","offsetHeight","setImagePortfolio","parentNode","obj","addEventListener","className","ref","onMove","onRefresh","options","lazyLoad","updateOnMove","perPage","fixedWidth","perMove","pagination","arrows","drag","speed","wheel","wheelSleep","autoplay","interval","pauseOnHover","breakpoints"],"sourceRoot":""}